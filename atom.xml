<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Popstas]]></title>
  <link href="http://blog.popstas.ru/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2016-02-26T21:47:29+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker в картинках]]></title>
    <link href="http://blog.popstas.ru/blog/2016/02/26/docker-in-images/"/>
    <updated>2016-02-26T21:29:45+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/02/26/docker-in-images</id>
    <content type="html"><![CDATA[<p>Оставлю здесь свой пост с хабра.</p>

<p><em>Перевод поста <a href="http://merrigrove.blogspot.co.uk/2015/10/visualizing-docker-containers-and-images.html">Visualizing Docker Containers and Images</a>, от новичка к новичкам, автор на простых примерах объясняет базовые сущности и процессы в использовании docker.</em></p>

<p>Если вы не знаете, что такое Docker или не понимаете, как он соотносится с виртуальными машинами или с инструментами configuration management, то этот пост может показаться немного сложным.</p>

<p>Пост предназначен для тех, кто пытается освоить docker cli, понять, чем отличается контейнер и образ. В частности, будет объяснена разница между просто контейнером и запущенным контейнером.
<img src="https://habrastorage.org/files/8ff/349/fb2/8ff349fb23f840589c479d029964b8dc.png"></p>

<!-- more -->


<p>В процессе освоения нужно представить себе некоторые лежащие в основе детали, например, слои файловой системы UnionFS. В течение последней пары недель я изучал технологию, я новичок в мире docker, и командная строка docker показалась мне довольно сложной для освоения.</p>

<p>По-моему, понимание того, как технология работает изнутри - лучший способ быстро освоить новый инструмент и правильно его использовать. Часто новая технология разрабатывает новые модели абстракций и привносит новые термины и метафоры, которые могут быть как будто бы понятны в начале, но без четкого понимания затрудняют последующее использование инструмента.</p>

<p>Хорошим примером является Git. Я не мог понять Git, пока не понял его базовую модель, включая trees, blobs, commits, tags, tree-ish и прочее. Я думаю, что люди, не понимающие внутренности Git, не могут мастерски использовать этот инструмент.</p>

<h2>Определение образа (Image)</h2>

<p>Визуализация образа представлена ниже в двух видах. Образ можно определить как &ldquo;сущность&rdquo; или &ldquo;общий вид&rdquo; (union view) стека слоев только для чтения.</p>

<p><img src="https://habrastorage.org/files/243/a01/1ed/243a011ed04f455099a4ba64a87736f6.png"></p>

<p>Слева мы видим стек слоев для чтения. Они показаны только для понимания внутреннего устройства, они доступны вне запущенного контейнера на хост-системе. Важно то, что они доступны только для чтения (иммутабельны), а все изменения происходят в верхнем слое стека. Каждый слой может иметь одного родителя, родитель тоже имеет родителя и т.д. Слой верхнего уровня может быть использован как UnionFS (AUFS в моем случае с docker) и представлен в виде единой read-only файловой системы, в которой отражены все слои. Мы видим эту &ldquo;сущность&rdquo; образа на рисунке справа.</p>

<p>Если вы захотите посмотреть на эти слои в первозданном виде, вы можете найти их в файловой системе на хост-машине. Они не видны напрямую из запущенного контейнера. На моей хост-машине я могу найти образы в /var/lib/docker/aufs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sudo tree -L 1 /var/lib/docker/
</span><span class='line'>/var/lib/docker/
</span><span class='line'>├── aufs
</span><span class='line'>├── containers
</span><span class='line'>├── graph
</span><span class='line'>├── init
</span><span class='line'>├── linkgraph.db
</span><span class='line'>├── repositories-aufs
</span><span class='line'>├── tmp
</span><span class='line'>├── trust
</span><span class='line'>└── volumes
</span><span class='line'>
</span><span class='line'>7 directories, 2 files</span></code></pre></td></tr></table></div></figure>


<h2>Определение контейнера (Container)</h2>

<p>Контейнер можно назвать &ldquo;сущностью&rdquo; стека слоев с верхним слоем для записи.</p>

<p><img src="https://habrastorage.org/files/8d3/d29/494/8d3d29494dbf46f79b1be15cea7516c4.png"></p>

<p>На изображении выше показано примерно то же самое, что на изображении про образ, кроме того, что верхний слой доступен для записи. Вы могли заметить, что это определение ничего не говорит о том, запущен контейнер или нет и это неспроста. Разделение контейнеров на запущенные и не запущенные устранило путаницу в моем понимании.</p>

<p>Контейнер определяет лишь слой для записи наверху образа (стека слоев для чтения). Он не запущен.</p>

<h2>Определение запущенного контейнера</h2>

<p>Запущенный контейнер - это &ldquo;общий вид&rdquo; контейнера для чтения-записи и его изолированного пространства процессов. Ниже изображен контейнер в своем пространстве процессов.</p>

<p><img src="https://habrastorage.org/files/c72/5d3/b0b/c725d3b0be5742aca5f50310d640d0b1.png"></p>

<p>Изоляция файловой системы обеспечивается технологиями уровня ядра, cgroups, namespaces и другие, позволяют докеру быть такой перспективной технологией. Процессы в пространстве контейнера могут изменять, удалять или создавать файлы, которые сохраняются в верхнем слое для записи. Смотрите изображение:</p>

<p><img src="https://habrastorage.org/files/f8e/bbf/e3b/f8ebbfe3b59346ee9cdb017b89fcb169.png"></p>

<p>Чтобы проверить это, выполните команду на хост-машине:</p>

<p><source lang="bash">
docker run ubuntu touch happiness.txt
</source>
Вы можете найти новый файл в слое для записи на хост-машине, даже если контейнер не запущен.</p>

<p><source lang="bash"></p>

<h1>find / -name happiness.txt</h1>

<p>/var/lib/docker/aufs/diff/860a7b&hellip;889/happiness.txt
</source></p>

<h2>Определение слоя образа (Image layer)</h2>

<p>Наконец, мы определим слой образа. Изображение ниже представляет слой образа и дает нам понять, что слой - это не просто изменения в файловой системе.</p>

<p><img src="https://habrastorage.org/files/928/23a/1a0/92823a1a03ad487586293f37e78cf74f.png"></p>

<p>Метаданные - дополнительная информация о слое, которая позволяет докеру сохранять информацию во время выполнения и во время сборки. Оба вида слоев (для чтения и для записи) содержат метаданные.</p>

<p><img src="https://habrastorage.org/files/b7e/d04/252/b7ed042525f647b986009b82d18b3fee.png"></p>

<p>Кроме того, как мы уже упоминали раньше, каждый слой содержит указатель на родителя, используя id (на изображении родительские слои внизу). Если слой не указывает на родительский слой, значит он наверху стека.</p>

<p><img src="https://habrastorage.org/files/7e9/de2/c4f/7e9de2c4f537438c8f5357d09c398289.png"></p>

<h5>Расположение метаданных</h5>


<p>На данный момент (я понимаю, что разработчики docker могут позже сменить реализацию), метаданные слоев образов (для чтения) находятся в файле с именем &ldquo;json&rdquo; в папке /var/lib/docker/graph/id_слоя:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/var/lib/docker/graph/e809f156dc985.../json</span></code></pre></td></tr></table></div></figure>


<p>где &ldquo;e809f156dc985&hellip;&rdquo; - урезанный id слоя.</p>

<h2>Свяжем все вместе</h2>

<p>Теперь, давайте посмотрим на команды, иллюстрированные понятными картинками.</p>

<h3>docker create <image-id></h3>

<p>До:
<img src="https://habrastorage.org/files/71a/d30/a1e/71ad30a1e0b04cb09db3e25c741ef7a8.png"></p>

<p>После:
<img src="https://habrastorage.org/files/bdc/1cc/f14/bdc1ccf14b1c4702afe71cbd27a1574b.png"></p>

<p>Команда &lsquo;docker create&rsquo; добавляет слой для записи наверх стека слоев, найденного по <image-id>. Команда не запускает контейнер.</p>

<p><img src="https://habrastorage.org/files/12c/8d5/606/12c8d56068c5416e8ca003b532ef3cdb.png"></p>

<h3>docker start <container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/bdc/1cc/f14/bdc1ccf14b1c4702afe71cbd27a1574b.png"></p>

<p>После:
<img src="https://habrastorage.org/files/730/6c4/4cd/7306c44cdfdd4ead9f1f073d91dd312c.png"></p>

<p>Команда &lsquo;docker start&rsquo; создает пространство процессов вокруг слоев контейнера. Может быть только одно пространство процессов на один контейнер.</p>

<h3>docker run <image-id></h3>

<p>До:
<img src="https://habrastorage.org/files/71a/d30/a1e/71ad30a1e0b04cb09db3e25c741ef7a8.png"></p>

<p>После:
<img src="https://habrastorage.org/files/730/6c4/4cd/7306c44cdfdd4ead9f1f073d91dd312c.png"></p>

<p>Один из первых вопросов, который задают люди (я тоже задавал): &ldquo;В чем разница между &lsquo;docker start&rsquo; и &lsquo;docker run&rsquo;?&rdquo; Одна из первоначальных целей этого поста - объяснить эту тонкость.</p>

<p><img src="https://habrastorage.org/files/429/f39/fc6/429f39fc67d44579a40365018dc6839e.png"></p>

<p>Как мы видим, команда &lsquo;docker run&rsquo; находит образ, создает контейнер поверх него и запускает контейнер. Это сделано для удобства и скрывает детали двух команд.</p>

<p>Продолжая сравнение с освоением Git, я скажу, что &lsquo;docker run&rsquo; очень похожа на &lsquo;git pull&rsquo;. Так же, как и &lsquo;git pull&rsquo; (который объединяет &lsquo;git fetch&rsquo; и &lsquo;git merge&rsquo;), команда &lsquo;docker run&rsquo; объединяет две команды, которые могут использоваться и независимо. Это удобно, но поначалу может ввести в заблуждение.</p>

<h3>docker ps</h3>

<p><img src="https://habrastorage.org/files/441/0ed/8b7/4410ed8b7bb94de68dfae60a79a08aca.png"></p>

<p>Команда &lsquo;docker ps&rsquo; выводит список запущенных контейнеров на вашей хост-машине. Важно понимать, что в этот список входят только запущенные контейнеры, не запущенные контейнеры скрыты. Чтобы посмотреть список всех контейнеров, нужно использовать следующую команду.</p>

<h3>docker ps -a</h3>

<p><img src="https://habrastorage.org/files/633/55a/c1a/63355ac1a27d4cf6a1f10142cc89d7b0.png"></p>

<p>Команда &lsquo;docker ps -a&rsquo;, где &lsquo;a&rsquo; - сокращение от &lsquo;all&rsquo; выводит список всех контейнеров, независимо от их состояния.</p>

<h3>docker images</h3>

<p><img src="https://habrastorage.org/files/2d2/29e/bc6/2d229ebc667244b3b478298aa3162c7e.png"></p>

<p>Команда &lsquo;docker images&rsquo; выводит список образов верхнего уровня (top-level images). Фактически, ничего особенного не отличает образ от слоя для чтения. Только те образы, которые имеют присоединенные контейнеры или те, что были получены с помощью pull, считаются образами верхнего уровня. Это различие нужно для удобства, так как за каждым образом верхнего уровня может быть множество слоев.</p>

<h3>docker images -a</h3>

<p><img src="https://habrastorage.org/files/5b6/6a9/fd9/5b66a9fd93ce4157b3cfa48984a5ca0d.png"></p>

<p>Команда &lsquo;docker images -a&rsquo; выводит все образы на хост-машине. Это фактически список всех слоев для чтения в системе. Если вы хотите увидеть все слои одного образа, воспользуйтесь командой &lsquo;docker history&rsquo;.</p>

<h3>docker stop <container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/f34/430/e32/f34430e3231842e3b748d337993e9338.png"></p>

<p>После:
<img src="https://habrastorage.org/files/bdc/1cc/f14/bdc1ccf14b1c4702afe71cbd27a1574b.png"></p>

<p>Команда &lsquo;docker stop&rsquo; посылает сигнал SIGTERM запущенному контейнеру, что мягко останавливает все процессы в пространстве процессов контейнера. В результате мы получаем не запущенный контейнер.</p>

<h3>docker kill <container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/ef8/c77/3c3/ef8c773c34454292b76f798482e15463.png"></p>

<p>После:
<img src="https://habrastorage.org/files/bdc/1cc/f14/bdc1ccf14b1c4702afe71cbd27a1574b.png"></p>

<p>Команда &lsquo;docker kill&rsquo; посылает сигнал SIGKILL, что немедленно завершает все процессы в текущем контейнере. Это почти то же самое, что нажать Ctrl+\ в терминале.</p>

<h3>docker pause <container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/63d/de7/ed4/63dde7ed482544e0afcc2925eabc1e3d.png"></p>

<p>После:
<img src="https://habrastorage.org/files/70d/208/439/70d208439a1944739c5e06e716ab1975.png"></p>

<p>В отличие от &lsquo;docker stop&rsquo; и &lsquo;docker kill&rsquo;, которые посылают настоящие UNIX сигналы процессам контейнера, команда &lsquo;docker pause&rsquo; используют специальную возможность cgroups для заморозки запущенного пространства процессов. Подробности можно прочитать <a href="https://www.kernel.org/doc/Documentation/cgroups/freezer-subsystem.txt">здесь</a>, если вкратце, отправки сигнала Ctrl+Z (SIGTSTP) не достаточно, чтобы заморозить все процессы в пространстве контейнера.</p>

<h3>docker rm <container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/92d/14d/d92/92d14dd9224043079a90ab80c4dbc6a6.png"></p>

<p>После:
<img src="https://habrastorage.org/files/a36/292/8c4/a362928c4661422797d267560ff38182.png"></p>

<p>Команда &lsquo;docker rm&rsquo; удаляет слой для записи, который определяет контейнер на хост-системе. Должна быть запущена на остановленном контейнерах. Удаляет файлы.</p>

<h3>docker rmi <image-id></h3>

<p>До:
<img src="https://habrastorage.org/files/4c2/eb5/26a/4c2eb526a35e4751a5302c954370a0fa.png"></p>

<p>После:
<img src="https://habrastorage.org/files/3a2/145/38a/3a214538a6e54e009f704825109393a1.png"></p>

<p>Команда &lsquo;docker rmi&rsquo; удаляет слой для чтения, который определяет &ldquo;сущность&rdquo; образа. Она удаляет образ с хост-системы, но образ все еще может быть получен из репозитория через &lsquo;docker pull&rsquo;. Вы можете использовать &lsquo;docker rmi&rsquo; только для слоев верхнего уровня (или образов), для удаления промежуточных слоев нужно использовать &lsquo;docker rmi -f&rsquo;.</p>

<h3>docker commit <container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/7d0/ec4/104/7d0ec41049b34238bb785e28897e28f0.png"> или <img src="https://habrastorage.org/files/325/e8e/270/325e8e27098e4cdeb956634361879388.png"></p>

<p>После:
<img src="https://habrastorage.org/files/daa/69c/50f/daa69c50fbc3479ba9d6497983b73a02.png"></p>

<p>Команда &lsquo;docker commit&rsquo; берет верхний уровень контейнера, тот, что для записи и превращает его в слой для чтения. Это фактически превращает контейнер (вне зависимости от того, запущен ли он) в неизменяемый образ.</p>

<p><img src="https://habrastorage.org/files/e3d/7d7/766/e3d7d7766165425a9148ac61369ffe9c.png"></p>

<h3>docker build</h3>

<p>До:
Dockerfile <img src="https://habrastorage.org/files/847/71b/87a/84771b87a8cd4d77b63d39a3ae9dae13.png"> и <img src="https://habrastorage.org/files/71a/d30/a1e/71ad30a1e0b04cb09db3e25c741ef7a8.png"></p>

<p>После:
<img src="https://habrastorage.org/files/71a/d30/a1e/71ad30a1e0b04cb09db3e25c741ef7a8.png">
Со многими другими слоями.</p>

<p>Команда &lsquo;docker build&rsquo; интересна тем, что запускает целый ряд команд:
<img src="https://habrastorage.org/files/b25/36e/cac/b2536ecac84148ba9a043bb00fe3ce5a.png"></p>

<p>На изображении выше мы видим, как команда build использует значение инструкции FROM из файла Dockerfile как базовый образ после чего:</p>

<p>1) запускает контейнер (create и start)
2) изменяет слой для записи
3) делает commit
На каждой итерации создается новый слой. При исполнении &lsquo;docker build&rsquo; может создаваться множество слоев.</p>

<h3>docker exec <running-container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/7d0/ec4/104/7d0ec41049b34238bb785e28897e28f0.png"></p>

<p>После:
<img src="https://habrastorage.org/files/4d6/cd5/21e/4d6cd521ee4d47e68d89e9ce77c8a6ca.png"></p>

<p>Команда &lsquo;docker exec&rsquo; применяется к запущенному контейнеру, запускает новый процесс внутри пространства процессов контейнера.</p>

<h3>docker inspect <container-id> | <image-id></h3>

<p>До:
<img src="https://habrastorage.org/files/74c/7ee/e53/74c7eee53b8f4ed8a2a606e87571fe3a.png"> или <img src="https://habrastorage.org/files/242/b58/b68/242b58b68acd4580b226569d81d613e5.png"></p>

<p>После:
<img src="https://habrastorage.org/files/898/5e8/e54/8985e8e5467a42769988a4351d0c0828.png"></p>

<p>Команда &lsquo;docker inspect&rsquo; получает метаданные верхнего слоя контейнера или образа.</p>

<h3>docker save <image-id></h3>

<p>До:
<img src="https://habrastorage.org/files/f2a/b8d/70d/f2ab8d70de7a4ca4959f6a7bf1fb11e3.png"></p>

<p>После:
<img src="https://habrastorage.org/files/d5d/bf7/3f0/d5dbf73f0f2d4d72b0ed38309e2c6a6b.png"></p>

<p>Команда &lsquo;docker save&rsquo; создает один файл, который может быть использован для импорта образа на другую хост-систему. В отличие от команды &lsquo;export&rsquo;, она сохраняет все слои и их метаданные. Может быть применена только к образам.</p>

<h3>docker export <container-id></h3>

<p>До:
<img src="https://habrastorage.org/files/a7f/3f4/717/a7f3f47170084dc2b75dd73e8d6a5cbb.png"></p>

<p>После:
<img src="https://habrastorage.org/files/36d/807/ed6/36d807ed6b304333b31f658dfb5c4326.png"></p>

<p>Команда &lsquo;docker export&rsquo; создает tar архив с содержимым файлов контейнера, в результате получается папка, пригодная для использования вне docker. Команда убирает слои и их метаданные. Может быть применена только для контейнеров.</p>

<h3>docker history <image-id></h3>

<p>До:
<img src="https://habrastorage.org/files/428/150/afc/428150afc2574fd2bf32f1202c908f77.png"></p>

<p>После:
<img src="https://habrastorage.org/files/e82/45f/511/e8245f51120340b19e07c6009f2d4ce8.png"></p>

<p>Команда &lsquo;docker history&rsquo; принимает <image-id> и рекурсивно выводит список всех слоев-родителей образа (которые тоже могут быть образами)</p>

<h2>Итог</h2>

<p>Я надеюсь, вам понравилась эта визуализация контейнеров и образов. Есть много других команд (pull, search, restart, attach и другие), которые могут или не могут быть объяснены моими сравнениями.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Большой тачпад как замена мышки]]></title>
    <link href="http://blog.popstas.ru/blog/2016/02/25/big-touchpad-as-mouse-replacement/"/>
    <updated>2016-02-25T23:31:57+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/02/25/big-touchpad-as-mouse-replacement</id>
    <content type="html"><![CDATA[<p>Наслушавшись рассказов про то, какой на макбуке офигенный большой тачпад и как он легко заменяет мышку,
нашел способ испытать это на себе бесплатно. Описываю свои впечатления как обычно: плюсы, минусы, грабли, способы обхода.</p>

<p><img src="http://blog.popstas.ru/images/2016-02/touchpad_wacom.jpg"></p>

<!-- more -->


<p>Мне повезло: у нас в офисе лежал без дела графический планшет Wacom Intuos Pen &amp; Touch Medium.
Выглядит как огромный (почти А4 формата) тачпад, экрана нет, зато есть поддержка всех операционок и мультитач.</p>

<p>Не скажу насчет винды и линукса, расскажу про мак, но уверен, что по поддержке жестов в Windows не отстает, по крайней мере у Wacom драйвера примерно одинаковые везде.</p>

<h1>Плюсы:</h1>

<ol>
<li><p>Скролл как на мобиле! Можно прокрутить 1000 строк и страницу любой длины за секунду, с таким же кинетическим эффектом, как на мобильном. То есть можно махнуть плавно и прокрутить чуть-чуть, а можно резко. У меня на работе мышка Logitech M705, у нее колесико не зафиксировано, ей можно делать то же самое, а вот дома такого не хватало.</p></li>
<li><p>Больше действий, чем на мышке. Мышки у меня были разные, бывало от 2 до 8 кнопок, последние лет 8 использую мышки с кнопками вперед-назад. У тачпада возможности намного больше.</p></li>
<li><p>Жесты. Если кто-то пробовал использовать жесты мышью в опере или с помощью утилит, то на тачпаде то же самое, но лучше. У меня на wacom доступны простые жесты, я не нашел софт под него, чтобы настроить свои, но даже при этом мне нравится: можно использовать от 1 до 4 пальцев, у каждого сочетания своя функция, в итоге передвигая пальцы вправо, можно вести курсор, выделять текст, переходить вперед в браузере, перетаскивать что-то или переключать текущее окно, в зависимости от сочетания. Ну и местами зум, поворот (ни разу не использовал).</p></li>
<li><p>Горизонтальный скролл теперь так же прост, как вертикальный. Это я не сразу понял, а когда открыл браузер на треть экрана и понял, что дотянуться до кнопки в правой части экрана за пределами видимости очень просто. По сути это для меня в некоторых случаях расширяет рабочую область экрана, которой много не бывает.</p></li>
<li><p>Плюс, растущий из минуса: в ситуациях, где мышкой было бы удобнее, руки тянутся к клавиатуре, надеюсь, они там найдут способы делать что надо быстрее, чем мышкой. Этого можно достичь и менее радикальными способами, но <a href="https://www.youtube.com/watch?v=NnTi9B-D6LA">по бразильской системе</a> все быстрее осваивается :) В PhpStorm уже почувствовал прогресс в клавиатурном управлении, хотя к этому причастен еще и <a href="https://www.youtube.com/watch?v=eq3KiAH4IBI">мастер-класс по Idea</a></p></li>
<li><p>Рука меньше устает. Запястье не упирается в стол на изгибе, а лежит на нем. Тачпадом, в отличие от мышки, можно точно управлять одними пальцами, поэтому запястье либо не касается стола, либо касается, но не играет роли опорной точки.</p></li>
<li><p>Можно тестить поведение сайтов на телефоне. Надуманный плюс, я это не использовал и может никогда не использую.</p></li>
</ol>


<h1>Минусы:</h1>

<ol>
<li><p>Неудобно перетаскивать. Выделение области скриншота, перетаскивание файлов - совершая подобные действия, вы рискуете не дотянуть докуда надо, так как нельзя в отличие от мышки, удерживая кнопку, передвинуть мышку и дотащить элемент.</p></li>
<li><p>Неудобно выделять. Все-таки точность у мыши намного выше, я за 2 дня научился точно попадать тачпадом между букв, куда мне надо, но чувствуется, что мышкой быстрее.</p></li>
<li><p>Мало жестов. Стандартный драйвер поддерживает 95% жестов из справки к системе и больше ничего. Нестандартного я не нашел.</p></li>
<li><p>Не хватает колесика от мышки. Постоянно его использую и без него обламываюсь. Открываю ссылки в новой вкладке через контекстное меню, закрываю вкладки крестиком&hellip; это конечно шаг назад.</p></li>
<li><p>Пальцы иногда срываются. Случайно нажать или отпустить палец в неподходящий момент намного проще, чем мышкой, из-за этого бывают случайные срабатывания всякой фигни.</p></li>
<li><p>Чувствительность может потеряться из-за состояния ваших пальцев. Не знаю, как эппловский тачпад, а вакомовский плохо понимает слишком потные, слишком сухие, слишком пыльные пальцы. А если один палец более скользкий, чем другой (такое случается), скроллить страницу двумя пальцами становится не так удобно. С мышкой таких проблем нет.</p></li>
<li><p>Большой. Мышь занимает меньше места даже с учетом ее рабочей площади. По ощущениям могу сказать, что толку от такого огромного тачпада немного, проявляется только когда нужно что-то перетащить на большое расстояние.</p></li>
</ol>


<h1>Решение проблем</h1>

<ol>
<li><p>Кастомные жесты. На маке похоже решаются только покупкой эппловского тачпада, на который есть миллион программ для расширения функциональности.</p></li>
<li><p>Перетаскивание. Решается эппловским тачпадом.</p></li>
<li><p>Колесико тоже надеюсь заменить кастомным жестом.</p></li>
<li><p>С пальцами ничего не сделаешь, уж какие есть, нерешаемая проблема.</p></li>
</ol>


<h1>Выводы</h1>

<p>Тачпадом вместо мышки я пользуюсь около месяца, руки к мышке уже не тянутся, но она лежит рядом, на всякие случаи, которые бывали раза два за месяц.</p>

<p>Как это ни странно (мне странно), думаю, что тачпад может быть удобнее мышки. Когда куплю нормальный тачпад, узнаю, так ли это.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Проверяем изменения на странице через Cron]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/31/check-webpage-changes-with-cron/"/>
    <updated>2016-01-31T02:00:13+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/31/check-webpage-changes-with-cron</id>
    <content type="html"><![CDATA[<p>Сегодня хотел заказать ароматизаторов на <a href="http://baker-flavors.blogspot.ru/">Baker Flavours</a>, дошел до страницы заказа,
и увидел &ldquo;Уважаемые заказчики! В связи с чрезвычайно большим количеством заказов, прием заказов временно прекращен.&rdquo;.</p>

<p>Ок, будем ждать, пока эта надпись не пропадет, а чтобы не проверять руками, будем делать это на автомате и ждать уведомления.</p>

<p>Строчка для crontab:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 20 * * * curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep "временно прекращен" &gt; /dev/null || { echo "BF order started" | terminal-notifier && open http://bakerflavors.ru/formbf.htm }</span></code></pre></td></tr></table></div></figure>


<p>Подробности под катом.</p>

<!-- more -->


<p>Нужно сделать так, чтобы я узнал о том, что этот текст со страницы пропадет.</p>

<p>Получаем содержимое страницы:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://bakerflavors.ru/formbf.htm</span></code></pre></td></tr></table></div></figure>


<p>Оказалось, что страница в windows-1251 кодировке и выдает <code>�</code>. Конвертируем:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8</span></code></pre></td></tr></table></div></figure>


<p>Проверяем наличие текста:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep "временно прекращен" &gt; /dev/null </span></code></pre></td></tr></table></div></figure>


<p>Когда текст пропадет, grep выдаст ненулевой exitcode. Добавляем действие на этот случай.</p>

<p>В начале я сделал как обычно делаю на сервере: отправил письмо через команду <code>mail</code>. Оказалось, что письмо уходит в спам.
Не стал с этим разбираться, вместо этого буду показывать notification. Уведомление сделал через
<a href="https://github.com/julienXX/terminal-notifier">julienXX/terminal-notifier</a> (Mac OS),
но тут опять вышел облом: уведомление нельзя показывать бесконечно, если я окажусь в это время не перед экраном,
я об этом не узнаю. Поэтому буду еще и открывать страницу заказа в браузере. В итоге получилось вот это:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep "временно прекращен" &gt; /dev/null || { \
</span><span class='line'>  echo "BF order started" | terminal-notifier && \
</span><span class='line'>  open http://bakerflavors.ru/formbf.htm \
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[E.ggtimer: таймер в пару кликов в любом браузере]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/31/timer-in-browser-with-1-second-time-to-start/"/>
    <updated>2016-01-31T01:43:24+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/31/timer-in-browser-with-1-second-time-to-start</id>
    <content type="html"><![CDATA[<p>Бывает, что надо вспомнить о чем-то в ближайшее время: выключить чайник, выйти к подъезду через 10 минут,
бросить заниматься фигней через полчаса - для таких вещей идеально подходит таймер. От таймера требуется только одно:
возможность установить его в течение 5 секунд. Недавно я нашел такой с такими плюсами:</p>

<ul>
<li>Настроить нужно один раз, после этого будет работать на всех системах, если включена синхронизация настроек браузера</li>
<li>Пользоваться легко</li>
</ul>


<p><img src="http://blog.popstas.ru/images/2016-01/eggtimer.png"></p>

<!-- more -->


<p><a href="http://e.ggtimer.com">http://e.ggtimer.com</a> - с виду ничего особенного (так и есть), мне понравилась простота и задание времени через URL.
Какое-то время я пользовался им так: создал 2 таймера, на 5 и на 10 минут, сделал на них закладки на панель закладок.
Это не очень удобно по 2 причинам: на chrome мне жалко места на панели, а на firefox у меня панели закладок нет.</p>

<p>Выход такой: оба браузера поддерживают пользовательские поисковые системы, сделаем такие.</p>

<h3>Firefox</h3>

<ol>
<li>Добавить в закладки <a href="http://e.ggtimer.com/%smin">http://e.ggtimer.com/%smin</a></li>
<li>Находим эту закладку в списке и делаем ей Keyword: t</li>
</ol>


<h3>Chrome</h3>

<ol>
<li>Настройки - Настроить поисковые системы</li>
<li>Добавить систему <code>e.ggtimer</code> - <code>t</code> - <code>http://e.ggtimer.com/%smin</code></li>
</ol>


<p>После этого таймер на 5 минут ставится так:</p>

<ol>
<li>Выбираем любой браузер</li>
<li>Ставим фокус на поисковую строку (<code>F6</code> / <code>Ctrl+L</code>)</li>
<li>Пишем <code>t 5</code>, <code>Enter</code></li>
</ol>


<p>На самом деле в Firefox не синхронизируется Keyword закладок, придется прописывать на каждой системе.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Автоматическое скачивание торрентов с Weburg в Transmission и статистика на InfluxDB & Grafana]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/17/torrent-transmission-client-for-weburg/"/>
    <updated>2016-01-17T08:22:25+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/17/torrent-transmission-client-for-weburg</id>
    <content type="html"><![CDATA[<p>У моего интернет-провайдера Планета есть бонусная программа поощрения раздачи торрентов с <a href="http://weburg.net">weburg.net</a>, дающая бонусы,
их можно тратить на абонентскую плату. У меня комп постоянно включен, я сразу стал участвовать.</p>

<p>Поддержку раздач можно разбить на несколько задач:</p>

<ol>
<li>периодически скачивать новинки фильмов</li>
<li>скачивать новые серии популярных сериалов</li>
<li>удалять то, что плохо раздается</li>
</ol>


<p>Через пару месяцев мне это надоело, задумался об автоматизации этого процесса и вот в новогодние каникулы родился
<a href="https://github.com/popstas/transmission-cli">transmission-cli</a> - консольная утилита, решающая часть этих задач.</p>

<iframe src="https://ghbtns.com/github-btn.html?user=popstas&repo=transmission-cli&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe>


<p><a href="https://travis-ci.org/popstas/transmission-cli"><img src="https://travis-ci.org/popstas/transmission-cli.svg?branch=master" alt="Build Status" /></a>
<a href="https://coveralls.io/github/popstas/transmission-cli?branch=master"><img src="https://coveralls.io/repos/popstas/transmission-cli/badge.svg?branch=master&amp;service=github" alt="Coverage Status" /></a></p>

<p><img src="https://github.com/popstas/transmission-cli/raw/master/doc/img/grafana.png?raw=true"></p>

<!-- more -->


<h2>Возможности</h2>

<ul>
<li>скачивание популярных торрентов с <a href="http://weburg.net">http://weburg.net</a></li>
<li>удаление дублирующихся раздач (для сериалов)</li>
<li>отправка метрик в InfluxDB (для слежения за популярностью)</li>
</ul>


<h1>Установка</h1>

<p>Установить клиент можно так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">latest_phar</span><span class="o">=</span><span class="k">$(</span>curl -s https://api.github.com/repos/popstas/transmission-cli/releases/latest <span class="p">|</span> grep <span class="s1">&#39;browser_&#39;</span> <span class="p">|</span> cut -d<span class="se">\&quot;</span> -f4<span class="k">)</span>
</span><span class='line'>wget -O /usr/local/bin/transmission-cli <span class="s2">&quot;$latest_phar&quot;</span>
</span><span class='line'>chmod +x /usr/local/bin/transmission-cli
</span></code></pre></td></tr></table></div></figure>


<p>Пользоваться графиками можно с трудом, потому что InfluxDB и Grafana вам придется устанавливать самостоятельно.
Я ставил то и другое в docker на свою виртуалку и пробрасывал порты на localhost,
сейчас localhost вшит в <a href="https://github.com/popstas/transmission-cli/blob/master/src/Config.php">конфиг</a>,
который по сути сейчас находится в коде.</p>

<p>Поставить можно так, заменив папки <code>/Users/popstas/lib/grafana</code> и <code>/var/lib/influxdb</code> на ваши,
это укажет, где будут храниться данные InfluxDB и Grafana:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -d <span class="se">\ </span>-p 3000:3000 <span class="se">\</span>
</span><span class='line'>           -v /Users/popstas/lib/grafana:/var/lib/grafana <span class="se">\</span>
</span><span class='line'>            --name grafana grafana/grafana
</span><span class='line'>
</span><span class='line'>docker run -d -p 8083:8083 -p 8086:8086 <span class="se">\</span>
</span><span class='line'>           -v /var/lib/influxdb:/data <span class="se">\</span>
</span><span class='line'>           --name influxdb tutum/influxdb
</span></code></pre></td></tr></table></div></figure>


<p>Папку от InfluxDB я оставил в виртуалке, т.к. оказалось, что InfluxDB не может работать с папкой, смонтированной в
VirtualBox из Mac OS (какой-то старый глюк docker).</p>

<p>Чтобы собиралась статистика, нужно добавить в cron задания, я собираю с 2 компов, поэтому добавляю 2 раза.</p>

<p>Также, чтобы не было конфликтов, статистика не будет отсылаться, если найдет раздачи с одинаковыми названиями,
которые обычно остаются от сериалов. Поэтому их нужно чистить перед отпправкой статистики.</p>

<p>Раздачи у меня скачиваются в папку, за которой следят оба Transmission, как только туда попадает торрент, раздача
сразу начинается (можно сделать, чтобы спрашивала разрешение, настраивается в Transmission).</p>

<p>В итоге у меня получился такой cron:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:/usr/local/bin&quot;</span>
</span><span class='line'><span class="m">59</span> * * * * transmission-cli remove-duplicates --host<span class="o">=</span>localhost
</span><span class='line'><span class="m">59</span> * * * * transmission-cli remove-duplicates --host<span class="o">=</span>wrtnsq
</span><span class='line'><span class="m">0</span>  * * * * transmission-cli send-metrics --host<span class="o">=</span>localhost
</span><span class='line'><span class="m">0</span>  * * * * transmission-cli send-metrics --host<span class="o">=</span>wrtnsq
</span><span class='line'><span class="m">1</span>  <span class="m">2</span> * * * transmission-cli download-weburg --dest<span class="o">=</span>/Volumes/media/_planeta/_torrents
</span></code></pre></td></tr></table></div></figure>


<h2>Результаты статистики</h2>

<p>Никогда не знал о своих раздачах ничего, кроме рейтинга и объема розданного за все время.
Графики показали интересные вещи (о которых можно было и так догадаться):</p>

<ul>
<li>с 18 до 22 пик раздач, с 22 до 2 спад, с 2 до 9 все спят</li>
<li>в праздники и выходные больше качают днем и до ночи, но после 2 все равно все спят</li>
<li>популярные фильмы популярны обычно не больше недели</li>
<li>есть популярные фильмы, которые популярны и через несколько месяцев, например &ldquo;Интерстеллар&rdquo;</li>
</ul>


<p>Сейчас я могу выбрать в Grafana период в 7 дней, отсортировать раздачи по розданным Гб и получить список
раздач-кандидатов на удаление.</p>

<p>Со статистикой еще надо работать, что еще хочется сделать:</p>

<ul>
<li><p>нормальную группировку по периодам, сейчас группируется только за час или за весь выбранный период,
нельзя выбрать последнюю неделю и посмотреть посуточные метрики. Я скидываю метрики и сначала не понимал,
почему так, но тут как раз вышла статья
<a href="http://habrahabr.ru/post/274303/">Почему расчет перцентилей работает не так как вы ожидаете?</a> и многое мне объяснила.</p></li>
<li><p>добавить в метрики инфу о весе раздач и вывести эффективность раздач: например, фильм в 1080p весом в 10 Гб
скачали на 50 Гб за неделю, а 2 Гб фильм низкого качества скачали на 10 Гб, если не учитывать вес раздач, то выходит,
что первая раздача в 5 раз эффективнее, но если учитвать, то оказвается, что они равны.</p></li>
</ul>


<h2>Техническая часть:</h2>

<ul>
<li>Symfony console - каркас консольной утилиты</li>
<li>InfluxDB - хранилище метрик</li>
<li>Grafana - рисование графиков</li>
<li>Composer - управление зависимостями</li>
<li>Box - <a href="http://habrahabr.ru/post/274745/">сборка PHAR</a></li>
<li>PHPCS, PHPMD - линтеры PHP</li>
<li>Travis CI - публицация PHAR на Github</li>
<li>Coveralls - сервис слежения за покрытием кода тестами</li>
</ul>


<p>Половину из этого я ни разу не использовал, вторую половину - немного. Поэтому граблей хватает.</p>

<h3>Symfony console</h3>

<p>Тут мне сказать особо нечего, фреймворки я только начинаю осваивать, пока ничего не понятно с Dependency Injection,
чувствую, что у меня переменные в функции местами прокидываются криво, а местами не прокидываются, где стоило бы.</p>

<p>Не понятно, как тестить через PHPUnit, как мокать объекты.</p>

<p>Пока радуюсь, что освоился с namespaces и использовал на практике PSR-2 и PSR-4.</p>

<p>Почти все идеи взяты из исходников
<a href="https://github.com/composer/composer">composer</a> и
<a href="https://github.com/MartialGeek/transmission-api">transmission-api</a></p>

<h3>InfluxDB</h3>

<p>InfluxDB не может работать с папкой, смонтированной в VirtualBox из Mac OS (какой-то старый глюк docker).</p>

<p>InfluxDB я раньше не видел, хотел посмотреть ее как замену для хранилища Whisper из стека
Diamond -> Carbon -> Whisper -> Graphite -> Grafana для рисования графиков сервера.</p>

<p>Компания, стоящая за InfluxDB с недавнего времени назвается InfluxData и предлагает свой стек
<a href="https://influxdata.com/time-series-platform/">TICK</a>, в который
входит еще и алертинг по отклонениям метрик. Могу сказать о нем то, что Telegraf работает, InfluxDB работает без тормозов,
собирая с моего компа метрики раз в 10 секунд, Chronograf какой-то неполноценный, по сравнению с Grafana,
а Kapacitor я еще не смотрел.</p>

<h3>Grafana</h3>

<p>В Grafana 2.6 появилось много нового, по сравнению с 2.0, которую я видел в августе. А вообще, если кто использовал
Cacti или Graphite и не видел Grafana, посмотрите, красота неописуемая.</p>

<h3>Composer</h3>

<p>Некоторые dev-пакеты (phpunit) потребовали php 5.6 для запуска, поэтому поставил 5.6 минимальной необходимой версией,
хотя по факту клиент может работать и на 5.5, а на 5.4 уже не может.</p>

<h3>Box</h3>

<p>Если собирать PHAR, используя box, установленный через composer, в архив попадает много ненужных dev-пакетов.
Сначала я пытался бороться с этим исключением пакетов через box.json, потом понял, что это бесполезно
(все пакеты не исключишь, а однажды исключишь нужный), в итоге пришел к такой схеме:</p>

<ul>
<li>ставим пакеты через <code>composer install --no-dev</code></li>
<li>качаем box.phar</li>
<li>собираем transmission-cli.phar</li>
<li>доставляем пакеты через composer update</li>
</ul>


<p>Это в 3 раза уменьшило вес собранного архива.</p>

<h3>PHPCS, PHPMD</h3>

<p>PHP Code Sniffer умеет анализировать ваш код на соответствие определенным стандартам, в моем случае PSR-2,
ставится через Composer, используется так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./vendor/bin/phpcs --standard<span class="o">=</span>psr2 ./src
</span></code></pre></td></tr></table></div></figure>


<p>А PHP Mess Detector у меня не запустился.</p>

<h3>Travis CI</h3>

<p>Впервые удалось использовать его по назначению. Как-то пробовал использовать его для тестов пакета bash скриптов
<a href="https://github.com/popstas/drupal-scripts">drupal-scripts</a>, но быстро сдался, т.к. в окружении travis они вели себя не так,
как на локалке (в итоге перекинул тесты на TeamCity).</p>

<p>На этом проекте travis прогоняет тесты phpunit
(тестов по сути еще нет, но без phpunit в каком-либо виде travis по умолчанию фейлит сборку)
и если к коммиту был проставлен git tag,
публикует PHAR как приложение к релизу на Github, чуть подробнее я написал
в <a href="http://habrahabr.ru/post/274745/#comment_8736379">этом комменте</a>.</p>

<h3>Coveralls</h3>

<p>До покрытия тестами я еще не добирался, я тесты-то еще только начинаю использовать, решил попробовать на этом проекте.</p>

<p>Чтобы добавить coveralls в самом простом случае (в доках есть и сложные), достаточно сделать так, чтобы PHPUnit
генерил файл <code>build/logs/clover.xml</code>, для этого надо добавить строчку в phpunit.xml, в секцию logging:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;logging&gt;</span>
</span><span class='line'>    <span class="nt">&lt;log</span> <span class="na">type=</span><span class="s">&quot;coverage-clover&quot;</span> <span class="na">target=</span><span class="s">&quot;build/logs/clover.xml&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/logging&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ну и конечно зарегаться на <a href="https://coveralls.io/">https://coveralls.io/</a> и активировать там проект.
Если путь будет другой, придется читать доки и создавать файл настройки .coveralls.yml</p>

<p>В результате я имею красивую красную ачивку на странице проекта
и <a href="https://coveralls.io/github/popstas/transmission-cli">историю деградации покрытия</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Быстрое обновление PhpStorm EAP на Mac OS через Bash]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os/"/>
    <updated>2016-01-17T07:50:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os</id>
    <content type="html"><![CDATA[<p>Надоело постоянно обновлять PhpStorm руками. На Ubuntu последнее время делал это с помощью ansible,
под Mac этот плейбук не расчитан, к тому же версию ему надо было указвать вручную.
Поэтому написал скрипт, не совместимый с Ubuntu :)</p>

<p><img src="http://blog.jetbrains.com/phpstorm/files/2016/01/PhpStorm11EAP_splash_2@2x.png"></p>

<!-- more -->


<p>Что он делает:</p>

<ul>
<li>идет на страницу EAP, находит там версию</li>
<li>проверяет, что на компе стоит другая версия EAP</li>
<li>качает dmg в папку Загрузки</li>
<li>монтирует образ</li>
<li>завершает PhpStorm, если он открыт</li>
<li>удаляет текущую версию и копирует новую в папку /Applications</li>
<li>запускает новую версию</li>
</ul>


<p>Поставить можно так:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s "https://gist.githubusercontent.com/popstas/613a72a34576b85caec4/raw/644f457ed0187ab0d1207576e925c06260451131/phpstorm-eap-update.sh" &gt; /usr/local/bin/phpstorm-eap-update
</span><span class='line'>chmod +x /usr/local/bin/phpstorm-eap-update</span></code></pre></td></tr></table></div></figure>


<p>После чего можно обновлять просто запуском <code>phpstorm-eap-update</code>.
По идее можно даже в cron его засунуть, чтобы совсем автомат, но я и так узнаю о новой версии из rss.</p>

<p>Код лежит здесь - <a href="https://gist.github.com/popstas/613a72a34576b85caec4">https://gist.github.com/popstas/613a72a34576b85caec4</a></p>

<p>В PhpStorm 11 из фич ничего особенного не нашел, зато с этой версии он перешел на использование Java 8,
не знаю, в этом ли дело, но у меня он вроде перестал тормозить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интерактивная Zsh History с поиском и скроллом, Percol]]></title>
    <link href="http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/"/>
    <updated>2015-12-10T19:55:20+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search</id>
    <content type="html"><![CDATA[<p>Если кто не знает, в bash/zsh есть поиск по истории комманд, если нажать <code>Ctrl+R</code> и начать набирать
команду, отобразится последняя команда из истории, для навигации можно использовать
<code>Ctrl+R</code>, <code>Ctrl+Shift+R</code>. При этом видно одновременно видно только одну команду из истории.</p>

<p>Утилита <a href="https://github.com/mooz/percol#zsh-history-search">percol</a> решает эту проблему.</p>

<p><img src="http://blog.popstas.ru/images/2015-12/percol.gif"></p>

<!-- more -->


<p>Собственно по ссылке выше готовый конфиг для zsh. Я немного изменил его под себя,
чтобы использовать percol не только для поиска по истории:</p>

<figure class='code'><figcaption><span>zsh-percol</span><a href='https://github.com/popstas/zsh-config/blob/master/.zshrc'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function</span> exists <span class="o">{</span> which <span class="nv">$1</span> <span class="p">&amp;</span>&gt; /dev/null <span class="o">}</span>
</span><span class='line'><span class="k">if</span> exists percol<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">function</span> percol_select_history<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">local </span>tac
</span><span class='line'>      exists gtac <span class="o">&amp;&amp;</span> <span class="nv">tac</span><span class="o">=</span><span class="s2">&quot;gtac&quot;</span> <span class="o">||</span> <span class="o">{</span> exists tac <span class="o">&amp;&amp;</span> <span class="nv">tac</span><span class="o">=</span><span class="s2">&quot;tac&quot;</span> <span class="o">||</span> <span class="o">{</span> <span class="nv">tac</span><span class="o">=</span><span class="s2">&quot;tail -r&quot;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>      <span class="nv">BUFFER</span><span class="o">=</span><span class="k">$(</span><span class="nb">fc</span> -l -n <span class="m">1</span> <span class="p">|</span> <span class="nb">eval</span> <span class="nv">$tac</span> <span class="p">|</span> percol --query <span class="s2">&quot;$LBUFFER&quot;</span><span class="k">)</span>
</span><span class='line'>      <span class="nv">CURSOR</span><span class="o">=</span><span class="nv">$#BUFFER</span>         <span class="c"># move cursor</span>
</span><span class='line'>      zle -R -c               <span class="c"># refresh</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  zle -N percol_select_history
</span><span class='line'>  bindkey <span class="s1">&#39;^R&#39;</span> percol_select_history
</span><span class='line'>
</span><span class='line'>  <span class="c"># percol based grep</span>
</span><span class='line'>  g<span class="o">()</span> <span class="o">{</span> percol --match-method regex --query<span class="o">=</span><span class="s2">&quot;$*&quot;</span><span class="p">;</span> <span class="o">}</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Код я добавил в <a href="https://github.com/popstas/zsh-config">свой .zshrc</a>. Если <a href="https://github.com/robbyrussell/oh-my-zsh/pull/4582">этот пулл реквест</a> примут, то данный код появится в составе
<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> в виде плагина <code>percol</code>.</p>

<p>Код полностью взят со страницы percol, от себя добавил функцию g(), она кстати конфиликтует с плагином git для oh-my-zsh,
зато теперь я могу писать что-то вроде:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -type file <span class="p">|</span> g
</span></code></pre></td></tr></table></div></figure>


<p>для интерактивного выбора результатов поиска и просто для замены grep. При этом доступен мультивыбор по <code>Ctrl+Space</code>.</p>

<p>Пример посложнее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim <span class="k">$(</span>find -name <span class="s2">&quot;*.markdown&quot;</span> <span class="p">|</span> g<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>После запуска откроется список всех <code>.markdown</code> файлов в текущей и вложенных папках, выбранный файл сразу откроется в Vim.
Это как будто у вас появилась возможность приделывать midnight commander к результатам поиска!</p>

<p>Смотрите больше интересных примеров <a href="https://github.com/mooz/percol">на странице проекта</a>.</p>

<p>Надо сказать, что на github есть программы с таким же функционалом, как у percol, я об этом узнал на странице самого percol.
Там есть peco, клон percol на Go (а значит поставляется в виде одного бинарника). Мне проще через pip установить percol, так
что с аналогами не сравнивал.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Простой тайм-трекер для отслеживания потраченного времени]]></title>
    <link href="http://blog.popstas.ru/blog/2015/11/22/simple-time-tracker/"/>
    <updated>2015-11-22T09:40:45+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/11/22/simple-time-tracker</id>
    <content type="html"><![CDATA[<p>На работе у меня часто бывает такое, что не понятно, куда ушло время.
Поэтому написал для себя небольшое приложение, тайм-трекер - <a href="http://time.popstas.ru/">http://time.popstas.ru/</a>
Пользуюсь им уже 2 года, сегодня решил выложить на гитхаб и заодно исправил
глюки, которые раздражали последние годы :)</p>

<p><img src="https://github.com/popstas/time-tracker/raw/master/img/screenshot.png?raw=true"></p>

<!-- more -->


<p>Конечно, перед тем, как написать свое, долго искал что-то похожее.
Самое близкое, что нашел - <a href="https://www.toggl.com/">https://www.toggl.com/</a></p>

<p>Так как я собирался использовать ее постоянно и переключать задачу,
пока человек, прибежавший со срочной задачей ждет, важна была каждая секунда.</p>

<p>time-tracker - простая задачница, решающая большую задачу слежения за собой.</p>

<h3>Фичи:</h3>

<ul>
<li>быстрое добавление задач</li>
<li>подзадачи</li>
<li>быстрое переключение между задачами</li>
<li>исправление времени задним числом</li>
<li>быстрое копирование сводки за день</li>
<li>отслеживание времени по каждой задаче</li>
<li>сводка по задачам</li>
<li>навигация с клавиатуры</li>
</ul>


<h3>Неочевидные моменты</h3>

<ul>
<li>При отслеживании активна всегда только одна задача.</li>
<li>Если включить Desktop notifications, каждые 10 минут будет всплывать сообщение
о том, сколько активна задача с последнего ее запуска и сколько активна всего.</li>
<li>Единственный способ создать второй список задач - открыть другой браузер.</li>
</ul>


<h3>Сценарии применения</h3>

<ul>
<li>постоянное переключение между задачами в течение дня</li>
<li>многодневный проект, когда надо отследить общее потраченное время</li>
<li>быстрый чеклист</li>
</ul>


<p>Для многодневного проекта кстати хочу попробовать связку
<a href="https://trello.com/">Trello</a> + <a href="https://toggl.com/tools">Toggl</a>,
пока писал этот пост, узнал, что у них есть интеграция.</p>

<h3>Как я использую задачницу:</h3>

<p>Прихожу в офис, включаю задачу &ldquo;текучка&rdquo;
После этого ставлю фильтр, чтобы показались задачи с ненулевым временем,
выделяю все, вставляю в блокнот (потом можно вспомнить, чем занимался в
такой-то день, бывает полезно), сбрасываю таймеры (справа от строки ввода),
удаляю ненужное, добавляю то, что сегодня собираюсь делать (1-2 задачи) и
начинаю работать.</p>

<p>Когда ко мне кто-то приходит, и начинает задавать вопросы, я тут же запускаю
в задачах соответствующий проект или &ldquo;прочие консультации&rdquo;, если быстро определить
не удалось.</p>

<p>Чаще всего текущие проекты поделены на несколько подзадач, а внезапно возникающие
просто обозначены проектами.</p>

<h3>Мои постоянные задачи:</h3>

<ul>
<li><code>текучка</code> - вся не классифицируемая мелочь
разбор почты, разбор задач в корпоративной системе.</li>
<li><code>-------</code> - перекуры, наливание чая, прочее ничегонеделание</li>
<li><code>обед</code> - ничегонеделание в обед</li>
<li><code>прочие консультации</code> - разговоры на рабочие темы</li>
<li><code>сисадминство</code> - работы по серверу</li>
<li>несколько задач с проектами, которые постоянно всплывают</li>
</ul>


<h2>Техническая часть</h2>

<ul>
<li>Backbone (использовал в первый и последний раз)</li>
<li>LESS, шрифтовые иконки</li>
<li>Хранилище данных в LocalStorage браузера</li>
</ul>


<p>Одной из причин написать было желание потрогать backbone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Показать все окна Gnome Terminal в Ubuntu]]></title>
    <link href="http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu/"/>
    <updated>2015-11-16T23:55:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu</id>
    <content type="html"><![CDATA[<p>При работе за компом имею привычку открывать много терминалов,
не группируя их по вкладкам, рабочим столам или менеджером терминалов типа tmux.
При этом терминалы расположены по всему рабочему экрану.</p>

<p>Из-за этого была такая проблема: при переключении на браузер или редактор,
которые обычно занимают по полэкрана, все терминалы оказывались под большими окнами.</p>

<p>Придумал решение: нужно, чтобы можно было выбрать один терминал (который обычно доступен по Alt-Tab),
нажать хоткей и достать все окна этой же программы наверх.</p>

<!-- more -->


<h4>Для этого нужно:</h4>

<ul>
<li>определить текущее окно</li>
<li>определить его класс</li>
<li>найти все окна с тем же классом</li>
<li>активировать каждое из окон</li>
</ul>


<p>Для манипуляции с окнами из консоли использовал <code>xdotool</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo aptitude install xdotool
</span></code></pre></td></tr></table></div></figure>


<p>Через полчаса родился страшный однострочник, в итоге из него получился такой скрипт:</p>

<figure class='code'><figcaption><span>windows-activate</span><a href='https://gist.github.com/popstas/9e1641e39abbda6392f1'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Activate all windows with process name of currently active window</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Получить текущее активное окно, его pid, имя процесса</span>
</span><span class='line'><span class="nv">current_pid</span><span class="o">=</span><span class="k">$(</span>xdotool getwindowpid <span class="k">$(</span>xdotool getactivewindow<span class="k">))</span>
</span><span class='line'><span class="nv">current_name</span><span class="o">=</span><span class="k">$(</span>ps -p <span class="nv">$current_pid</span> -o <span class="nv">comm</span><span class="o">=</span><span class="k">)</span>
</span><span class='line'><span class="nv">clean_name</span><span class="o">=</span><span class="k">${</span><span class="nv">current_name</span><span class="p">%-</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">name</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">$clean_name</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># найти окна процесса (только видимые), активировать каждое из них</span>
</span><span class='line'>xdotool search --onlyvisible --class <span class="s2">&quot;$name&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="p">|</span> xargs -L1 --no-run-if-empty xdotool windowactivate
</span></code></pre></td></tr></table></div></figure>


<h3>Какие были проблемы:</h3>

<ul>
<li>У каждого процесса оказалось штук по 5 &ldquo;окон&rdquo;, которые на самом деле не видны</li>
<li>Текущий процесс <code>gnome-terminal</code> виден в процессах как <code>gnome-terminal-server</code>,
в процессах имя не входит и отображается как <code>gnome-terminal-</code>,
в этом месте был вбит костыль, добавлена обрезка дефиса в конце.</li>
</ul>


<p>Скрипт был сохранен в /usr/local/bin/window-activate и через <code>ccsm</code> (Compiz config settings manager) повешен на хоткей.</p>

<p>Скрипт можно вызывать, передав параметром имя процесса, иначе возьмет его из текущего окна.</p>
]]></content>
  </entry>
  
</feed>
