<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Popstas]]></title>
  <link href="http://blog.popstas.ru/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2016-01-31T01:56:01+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[E.ggtimer: таймер в пару кликов в любом браузере]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/23/timer-in-browser-with-1-second-time-to-start/"/>
    <updated>2016-01-23T16:43:24+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/23/timer-in-browser-with-1-second-time-to-start</id>
    <content type="html"><![CDATA[<p>Бывает, что надо вспомнить о чем-то в ближайшее время: выключить чайник, выйти к подъезду через 10 минут,
бросить заниматься фигней через полчаса - для таких вещей идеально подходит таймер. От таймера требуется только одно:
возможность установить его в течение 5 секунд. Недавно я нашел такой с такими плюсами:</p>

<ul>
<li>Настроить нужно один раз, после этого будет работать на всех системах, если включена синхронизация настроек браузера</li>
<li>Пользоваться легко</li>
</ul>


<p><img src="http://blog.popstas.ru/images/2016-01/eggtimer.png"></p>

<!-- more -->


<p><a href="http://e.ggtimer.com">http://e.ggtimer.com</a> - с виду ничего особенного (так и есть), мне понравилась простота и задание времени через URL.
Какое-то время я пользовался им так: создал 2 таймера, на 5 и на 10 минут, сделал на них закладки на панель закладок.
Это не очень удобно по 2 причинам: на chrome мне жалко места на панели, а на firefox у меня панели закладок нет.</p>

<p>Выход такой: оба браузера поддерживают пользовательские поисковые системы, сделаем такие.</p>

<h3>Firefox</h3>

<ol>
<li>Добавить в закладки <a href="http://e.ggtimer.com/%smin">http://e.ggtimer.com/%smin</a></li>
<li>Находим эту закладку в списке и делаем ей Keyword: t</li>
</ol>


<h3>Chrome</h3>

<ol>
<li>Настройки - Настроить поисковые системы</li>
<li>Добавить систему <code>e.ggtimer</code> - <code>t</code> - <code>http://e.ggtimer.com/%smin</code></li>
</ol>


<p>После этого таймер на 5 минут ставится так:</p>

<ol>
<li>Выбираем любой браузер</li>
<li>Ставим фокус на поисковую строку (<code>F6</code> / <code>Ctrl+L</code>)</li>
<li>Пишем <code>t 5</code>, <code>Enter</code></li>
</ol>


<p>На самом деле в Firefox не синхронизируется Keyword закладок, придется прописывать на каждой системе.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Автоматическое скачивание торрентов с Weburg в Transmission и статистика на InfluxDB & Grafana]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/17/torrent-transmission-client-for-weburg/"/>
    <updated>2016-01-17T08:22:25+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/17/torrent-transmission-client-for-weburg</id>
    <content type="html"><![CDATA[<p>У моего интернет-провайдера Планета есть бонусная программа поощрения раздачи торрентов с <a href="http://weburg.net">weburg.net</a>, дающая бонусы,
их можно тратить на абонентскую плату. У меня комп постоянно включен, я сразу стал участвовать.</p>

<p>Поддержку раздач можно разбить на несколько задач:</p>

<ol>
<li>периодически скачивать новинки фильмов</li>
<li>скачивать новые серии популярных сериалов</li>
<li>удалять то, что плохо раздается</li>
</ol>


<p>Через пару месяцев мне это надоело, задумался об автоматизации этого процесса и вот в новогодние каникулы родился
<a href="https://github.com/popstas/transmission-cli">transmission-cli</a> - консольная утилита, решающая часть этих задач.</p>

<iframe src="https://ghbtns.com/github-btn.html?user=popstas&repo=transmission-cli&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe>


<p><a href="https://travis-ci.org/popstas/transmission-cli"><img src="https://travis-ci.org/popstas/transmission-cli.svg?branch=master" alt="Build Status" /></a>
<a href="https://coveralls.io/github/popstas/transmission-cli?branch=master"><img src="https://coveralls.io/repos/popstas/transmission-cli/badge.svg?branch=master&amp;service=github" alt="Coverage Status" /></a></p>

<p><img src="https://github.com/popstas/transmission-cli/raw/master/doc/img/grafana.png?raw=true"></p>

<!-- more -->


<h2>Возможности</h2>

<ul>
<li>скачивание популярных торрентов с <a href="http://weburg.net">http://weburg.net</a></li>
<li>удаление дублирующихся раздач (для сериалов)</li>
<li>отправка метрик в InfluxDB (для слежения за популярностью)</li>
</ul>


<h1>Установка</h1>

<p>Установить клиент можно так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">latest_phar</span><span class="o">=</span><span class="k">$(</span>curl -s https://api.github.com/repos/popstas/transmission-cli/releases/latest <span class="p">|</span> grep <span class="s1">&#39;browser_&#39;</span> <span class="p">|</span> cut -d<span class="se">\&quot;</span> -f4<span class="k">)</span>
</span><span class='line'>wget -O /usr/local/bin/transmission-cli <span class="s2">&quot;$latest_phar&quot;</span>
</span><span class='line'>chmod +x /usr/local/bin/transmission-cli
</span></code></pre></td></tr></table></div></figure>


<p>Пользоваться графиками можно с трудом, потому что InfluxDB и Grafana вам придется устанавливать самостоятельно.
Я ставил то и другое в docker на свою виртуалку и пробрасывал порты на localhost,
сейчас localhost вшит в <a href="https://github.com/popstas/transmission-cli/blob/master/src/Config.php">конфиг</a>,
который по сути сейчас находится в коде.</p>

<p>Поставить можно так, заменив папки <code>/Users/popstas/lib/grafana</code> и <code>/var/lib/influxdb</code> на ваши,
это укажет, где будут храниться данные InfluxDB и Grafana:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -d <span class="se">\ </span>-p 3000:3000 <span class="se">\</span>
</span><span class='line'>           -v /Users/popstas/lib/grafana:/var/lib/grafana <span class="se">\</span>
</span><span class='line'>            --name grafana grafana/grafana
</span><span class='line'>
</span><span class='line'>docker run -d -p 8083:8083 -p 8086:8086 <span class="se">\</span>
</span><span class='line'>           -v /var/lib/influxdb:/data <span class="se">\</span>
</span><span class='line'>           --name influxdb tutum/influxdb
</span></code></pre></td></tr></table></div></figure>


<p>Папку от InfluxDB я оставил в виртуалке, т.к. оказалось, что InfluxDB не может работать с папкой, смонтированной в
VirtualBox из Mac OS (какой-то старый глюк docker).</p>

<p>Чтобы собиралась статистика, нужно добавить в cron задания, я собираю с 2 компов, поэтому добавляю 2 раза.</p>

<p>Также, чтобы не было конфликтов, статистика не будет отсылаться, если найдет раздачи с одинаковыми названиями,
которые обычно остаются от сериалов. Поэтому их нужно чистить перед отпправкой статистики.</p>

<p>Раздачи у меня скачиваются в папку, за которой следят оба Transmission, как только туда попадает торрент, раздача
сразу начинается (можно сделать, чтобы спрашивала разрешение, настраивается в Transmission).</p>

<p>В итоге у меня получился такой cron:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:/usr/local/bin&quot;</span>
</span><span class='line'><span class="m">59</span> * * * * transmission-cli remove-duplicates --host<span class="o">=</span>localhost
</span><span class='line'><span class="m">59</span> * * * * transmission-cli remove-duplicates --host<span class="o">=</span>wrtnsq
</span><span class='line'><span class="m">0</span>  * * * * transmission-cli send-metrics --host<span class="o">=</span>localhost
</span><span class='line'><span class="m">0</span>  * * * * transmission-cli send-metrics --host<span class="o">=</span>wrtnsq
</span><span class='line'><span class="m">1</span>  <span class="m">2</span> * * * transmission-cli download-weburg --dest<span class="o">=</span>/Volumes/media/_planeta/_torrents
</span></code></pre></td></tr></table></div></figure>


<h2>Результаты статистики</h2>

<p>Никогда не знал о своих раздачах ничего, кроме рейтинга и объема розданного за все время.
Графики показали интересные вещи (о которых можно было и так догадаться):</p>

<ul>
<li>с 18 до 22 пик раздач, с 22 до 2 спад, с 2 до 9 все спят</li>
<li>в праздники и выходные больше качают днем и до ночи, но после 2 все равно все спят</li>
<li>популярные фильмы популярны обычно не больше недели</li>
<li>есть популярные фильмы, которые популярны и через несколько месяцев, например &ldquo;Интерстеллар&rdquo;</li>
</ul>


<p>Сейчас я могу выбрать в Grafana период в 7 дней, отсортировать раздачи по розданным Гб и получить список
раздач-кандидатов на удаление.</p>

<p>Со статистикой еще надо работать, что еще хочется сделать:</p>

<ul>
<li><p>нормальную группировку по периодам, сейчас группируется только за час или за весь выбранный период,
нельзя выбрать последнюю неделю и посмотреть посуточные метрики. Я скидываю метрики и сначала не понимал,
почему так, но тут как раз вышла статья
<a href="http://habrahabr.ru/post/274303/">Почему расчет перцентилей работает не так как вы ожидаете?</a> и многое мне объяснила.</p></li>
<li><p>добавить в метрики инфу о весе раздач и вывести эффективность раздач: например, фильм в 1080p весом в 10 Гб
скачали на 50 Гб за неделю, а 2 Гб фильм низкого качества скачали на 10 Гб, если не учитывать вес раздач, то выходит,
что первая раздача в 5 раз эффективнее, но если учитвать, то оказвается, что они равны.</p></li>
</ul>


<h2>Техническая часть:</h2>

<ul>
<li>Symfony console - каркас консольной утилиты</li>
<li>InfluxDB - хранилище метрик</li>
<li>Grafana - рисование графиков</li>
<li>Composer - управление зависимостями</li>
<li>Box - <a href="http://habrahabr.ru/post/274745/">сборка PHAR</a></li>
<li>PHPCS, PHPMD - линтеры PHP</li>
<li>Travis CI - публицация PHAR на Github</li>
<li>Coveralls - сервис слежения за покрытием кода тестами</li>
</ul>


<p>Половину из этого я ни разу не использовал, вторую половину - немного. Поэтому граблей хватает.</p>

<h3>Symfony console</h3>

<p>Тут мне сказать особо нечего, фреймворки я только начинаю осваивать, пока ничего не понятно с Dependency Injection,
чувствую, что у меня переменные в функции местами прокидываются криво, а местами не прокидываются, где стоило бы.</p>

<p>Не понятно, как тестить через PHPUnit, как мокать объекты.</p>

<p>Пока радуюсь, что освоился с namespaces и использовал на практике PSR-2 и PSR-4.</p>

<p>Почти все идеи взяты из исходников
<a href="https://github.com/composer/composer">composer</a> и
<a href="https://github.com/MartialGeek/transmission-api">transmission-api</a></p>

<h3>InfluxDB</h3>

<p>InfluxDB не может работать с папкой, смонтированной в VirtualBox из Mac OS (какой-то старый глюк docker).</p>

<p>InfluxDB я раньше не видел, хотел посмотреть ее как замену для хранилища Whisper из стека
Diamond -> Carbon -> Whisper -> Graphite -> Grafana для рисования графиков сервера.</p>

<p>Компания, стоящая за InfluxDB с недавнего времени назвается InfluxData и предлагает свой стек
<a href="https://influxdata.com/time-series-platform/">TICK</a>, в который
входит еще и алертинг по отклонениям метрик. Могу сказать о нем то, что Telegraf работает, InfluxDB работает без тормозов,
собирая с моего компа метрики раз в 10 секунд, Chronograf какой-то неполноценный, по сравнению с Grafana,
а Kapacitor я еще не смотрел.</p>

<h3>Grafana</h3>

<p>В Grafana 2.6 появилось много нового, по сравнению с 2.0, которую я видел в августе. А вообще, если кто использовал
Cacti или Graphite и не видел Grafana, посмотрите, красота неописуемая.</p>

<h3>Composer</h3>

<p>Некоторые dev-пакеты (phpunit) потребовали php 5.6 для запуска, поэтому поставил 5.6 минимальной необходимой версией,
хотя по факту клиент может работать и на 5.5, а на 5.4 уже не может.</p>

<h3>Box</h3>

<p>Если собирать PHAR, используя box, установленный через composer, в архив попадает много ненужных dev-пакетов.
Сначала я пытался бороться с этим исключением пакетов через box.json, потом понял, что это бесполезно
(все пакеты не исключишь, а однажды исключишь нужный), в итоге пришел к такой схеме:</p>

<ul>
<li>ставим пакеты через <code>composer install --no-dev</code></li>
<li>качаем box.phar</li>
<li>собираем transmission-cli.phar</li>
<li>доставляем пакеты через composer update</li>
</ul>


<p>Это в 3 раза уменьшило вес собранного архива.</p>

<h3>PHPCS, PHPMD</h3>

<p>PHP Code Sniffer умеет анализировать ваш код на соответствие определенным стандартам, в моем случае PSR-2,
ставится через Composer, используется так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./vendor/bin/phpcs --standard<span class="o">=</span>psr2 ./src
</span></code></pre></td></tr></table></div></figure>


<p>А PHP Mess Detector у меня не запустился.</p>

<h3>Travis CI</h3>

<p>Впервые удалось использовать его по назначению. Как-то пробовал использовать его для тестов пакета bash скриптов
<a href="https://github.com/popstas/drupal-scripts">drupal-scripts</a>, но быстро сдался, т.к. в окружении travis они вели себя не так,
как на локалке (в итоге перекинул тесты на TeamCity).</p>

<p>На этом проекте travis прогоняет тесты phpunit
(тестов по сути еще нет, но без phpunit в каком-либо виде travis по умолчанию фейлит сборку)
и если к коммиту был проставлен git tag,
публикует PHAR как приложение к релизу на Github, чуть подробнее я написал
в <a href="http://habrahabr.ru/post/274745/#comment_8736379">этом комменте</a>.</p>

<h3>Coveralls</h3>

<p>До покрытия тестами я еще не добирался, я тесты-то еще только начинаю использовать, решил попробовать на этом проекте.</p>

<p>Чтобы добавить coveralls в самом простом случае (в доках есть и сложные), достаточно сделать так, чтобы PHPUnit
генерил файл <code>build/logs/clover.xml</code>, для этого надо добавить строчку в phpunit.xml, в секцию logging:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;logging&gt;</span>
</span><span class='line'>    <span class="nt">&lt;log</span> <span class="na">type=</span><span class="s">&quot;coverage-clover&quot;</span> <span class="na">target=</span><span class="s">&quot;build/logs/clover.xml&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/logging&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ну и конечно зарегаться на <a href="https://coveralls.io/">https://coveralls.io/</a> и активировать там проект.
Если путь будет другой, придется читать доки и создавать файл настройки .coveralls.yml</p>

<p>В результате я имею красивую красную ачивку на странице проекта
и <a href="https://coveralls.io/github/popstas/transmission-cli">историю деградации покрытия</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Быстрое обновление PhpStorm EAP на Mac OS через Bash]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os/"/>
    <updated>2016-01-17T07:50:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os</id>
    <content type="html"><![CDATA[<p>Надоело постоянно обновлять PhpStorm руками. На Ubuntu последнее время делал это с помощью ansible,
под Mac этот плейбук не расчитан, к тому же версию ему надо было указвать вручную.
Поэтому написал скрипт, не совместимый с Ubuntu :)</p>

<p><img src="http://blog.jetbrains.com/phpstorm/files/2016/01/PhpStorm11EAP_splash_2@2x.png"></p>

<!-- more -->


<p>Что он делает:</p>

<ul>
<li>идет на страницу EAP, находит там версию</li>
<li>проверяет, что на компе стоит другая версия EAP</li>
<li>качает dmg в папку Загрузки</li>
<li>монтирует образ</li>
<li>завершает PhpStorm, если он открыт</li>
<li>удаляет текущую версию и копирует новую в папку /Applications</li>
<li>запускает новую версию</li>
</ul>


<p>Поставить можно так:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s "https://gist.githubusercontent.com/popstas/613a72a34576b85caec4/raw/644f457ed0187ab0d1207576e925c06260451131/phpstorm-eap-update.sh" &gt; /usr/local/bin/phpstorm-eap-update
</span><span class='line'>chmod +x /usr/local/bin/phpstorm-eap-update</span></code></pre></td></tr></table></div></figure>


<p>После чего можно обновлять просто запуском <code>phpstorm-eap-update</code>.
По идее можно даже в cron его засунуть, чтобы совсем автомат, но я и так узнаю о новой версии из rss.</p>

<p>Код лежит здесь - <a href="https://gist.github.com/popstas/613a72a34576b85caec4">https://gist.github.com/popstas/613a72a34576b85caec4</a></p>

<p>В PhpStorm 11 из фич ничего особенного не нашел, зато с этой версии он перешел на использование Java 8,
не знаю, в этом ли дело, но у меня он вроде перестал тормозить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интерактивная Zsh History с поиском и скроллом, Percol]]></title>
    <link href="http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/"/>
    <updated>2015-12-10T19:55:20+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search</id>
    <content type="html"><![CDATA[<p>Если кто не знает, в bash/zsh есть поиск по истории комманд, если нажать <code>Ctrl+R</code> и начать набирать
команду, отобразится последняя команда из истории, для навигации можно использовать
<code>Ctrl+R</code>, <code>Ctrl+Shift+R</code>. При этом видно одновременно видно только одну команду из истории.</p>

<p>Утилита <a href="https://github.com/mooz/percol#zsh-history-search">percol</a> решает эту проблему.</p>

<p><img src="http://blog.popstas.ru/images/2015-12/percol.gif"></p>

<!-- more -->


<p>Собственно по ссылке выше готовый конфиг для zsh. Я немного изменил его под себя,
чтобы использовать percol не только для поиска по истории:</p>

<figure class='code'><figcaption><span>zsh-percol</span><a href='https://github.com/popstas/zsh-config/blob/master/.zshrc'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function</span> exists <span class="o">{</span> which <span class="nv">$1</span> <span class="p">&amp;</span>&gt; /dev/null <span class="o">}</span>
</span><span class='line'><span class="k">if</span> exists percol<span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">function</span> percol_select_history<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">local </span>tac
</span><span class='line'>      exists gtac <span class="o">&amp;&amp;</span> <span class="nv">tac</span><span class="o">=</span><span class="s2">&quot;gtac&quot;</span> <span class="o">||</span> <span class="o">{</span> exists tac <span class="o">&amp;&amp;</span> <span class="nv">tac</span><span class="o">=</span><span class="s2">&quot;tac&quot;</span> <span class="o">||</span> <span class="o">{</span> <span class="nv">tac</span><span class="o">=</span><span class="s2">&quot;tail -r&quot;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>      <span class="nv">BUFFER</span><span class="o">=</span><span class="k">$(</span><span class="nb">fc</span> -l -n <span class="m">1</span> <span class="p">|</span> <span class="nb">eval</span> <span class="nv">$tac</span> <span class="p">|</span> percol --query <span class="s2">&quot;$LBUFFER&quot;</span><span class="k">)</span>
</span><span class='line'>      <span class="nv">CURSOR</span><span class="o">=</span><span class="nv">$#BUFFER</span>         <span class="c"># move cursor</span>
</span><span class='line'>      zle -R -c               <span class="c"># refresh</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  zle -N percol_select_history
</span><span class='line'>  bindkey <span class="s1">&#39;^R&#39;</span> percol_select_history
</span><span class='line'>
</span><span class='line'>  <span class="c"># percol based grep</span>
</span><span class='line'>  g<span class="o">()</span> <span class="o">{</span> percol --match-method regex --query<span class="o">=</span><span class="s2">&quot;$*&quot;</span><span class="p">;</span> <span class="o">}</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Код я добавил в <a href="https://github.com/popstas/zsh-config">свой .zshrc</a>. Если <a href="https://github.com/robbyrussell/oh-my-zsh/pull/4582">этот пулл реквест</a> примут, то данный код появится в составе
<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> в виде плагина <code>percol</code>.</p>

<p>Код полностью взят со страницы percol, от себя добавил функцию g(), она кстати конфиликтует с плагином git для oh-my-zsh,
зато теперь я могу писать что-то вроде:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -type file <span class="p">|</span> g
</span></code></pre></td></tr></table></div></figure>


<p>для интерактивного выбора результатов поиска и просто для замены grep. При этом доступен мультивыбор по <code>Ctrl+Space</code>.</p>

<p>Пример посложнее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim <span class="k">$(</span>find -name <span class="s2">&quot;*.markdown&quot;</span> <span class="p">|</span> g<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>После запуска откроется список всех <code>.markdown</code> файлов в текущей и вложенных папках, выбранный файл сразу откроется в Vim.
Это как будто у вас появилась возможность приделывать midnight commander к результатам поиска!</p>

<p>Смотрите больше интересных примеров <a href="https://github.com/mooz/percol">на странице проекта</a>.</p>

<p>Надо сказать, что на github есть программы с таким же функционалом, как у percol, я об этом узнал на странице самого percol.
Там есть peco, клон percol на Go (а значит поставляется в виде одного бинарника). Мне проще через pip установить percol, так
что с аналогами не сравнивал.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Простой тайм-трекер для отслеживания потраченного времени]]></title>
    <link href="http://blog.popstas.ru/blog/2015/11/22/simple-time-tracker/"/>
    <updated>2015-11-22T09:40:45+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/11/22/simple-time-tracker</id>
    <content type="html"><![CDATA[<p>На работе у меня часто бывает такое, что не понятно, куда ушло время.
Поэтому написал для себя небольшое приложение, тайм-трекер - <a href="http://time.popstas.ru/">http://time.popstas.ru/</a>
Пользуюсь им уже 2 года, сегодня решил выложить на гитхаб и заодно исправил
глюки, которые раздражали последние годы :)</p>

<p><img src="https://github.com/popstas/time-tracker/raw/master/img/screenshot.png?raw=true"></p>

<!-- more -->


<p>Конечно, перед тем, как написать свое, долго искал что-то похожее.
Самое близкое, что нашел - <a href="https://www.toggl.com/">https://www.toggl.com/</a></p>

<p>Так как я собирался использовать ее постоянно и переключать задачу,
пока человек, прибежавший со срочной задачей ждет, важна была каждая секунда.</p>

<p>time-tracker - простая задачница, решающая большую задачу слежения за собой.</p>

<h3>Фичи:</h3>

<ul>
<li>быстрое добавление задач</li>
<li>подзадачи</li>
<li>быстрое переключение между задачами</li>
<li>исправление времени задним числом</li>
<li>быстрое копирование сводки за день</li>
<li>отслеживание времени по каждой задаче</li>
<li>сводка по задачам</li>
<li>навигация с клавиатуры</li>
</ul>


<h3>Неочевидные моменты</h3>

<ul>
<li>При отслеживании активна всегда только одна задача.</li>
<li>Если включить Desktop notifications, каждые 10 минут будет всплывать сообщение
о том, сколько активна задача с последнего ее запуска и сколько активна всего.</li>
<li>Единственный способ создать второй список задач - открыть другой браузер.</li>
</ul>


<h3>Сценарии применения</h3>

<ul>
<li>постоянное переключение между задачами в течение дня</li>
<li>многодневный проект, когда надо отследить общее потраченное время</li>
<li>быстрый чеклист</li>
</ul>


<p>Для многодневного проекта кстати хочу попробовать связку
<a href="https://trello.com/">Trello</a> + <a href="https://toggl.com/tools">Toggl</a>,
пока писал этот пост, узнал, что у них есть интеграция.</p>

<h3>Как я использую задачницу:</h3>

<p>Прихожу в офис, включаю задачу &ldquo;текучка&rdquo;
После этого ставлю фильтр, чтобы показались задачи с ненулевым временем,
выделяю все, вставляю в блокнот (потом можно вспомнить, чем занимался в
такой-то день, бывает полезно), сбрасываю таймеры (справа от строки ввода),
удаляю ненужное, добавляю то, что сегодня собираюсь делать (1-2 задачи) и
начинаю работать.</p>

<p>Когда ко мне кто-то приходит, и начинает задавать вопросы, я тут же запускаю
в задачах соответствующий проект или &ldquo;прочие консультации&rdquo;, если быстро определить
не удалось.</p>

<p>Чаще всего текущие проекты поделены на несколько подзадач, а внезапно возникающие
просто обозначены проектами.</p>

<h3>Мои постоянные задачи:</h3>

<ul>
<li><code>текучка</code> - вся не классифицируемая мелочь
разбор почты, разбор задач в корпоративной системе.</li>
<li><code>-------</code> - перекуры, наливание чая, прочее ничегонеделание</li>
<li><code>обед</code> - ничегонеделание в обед</li>
<li><code>прочие консультации</code> - разговоры на рабочие темы</li>
<li><code>сисадминство</code> - работы по серверу</li>
<li>несколько задач с проектами, которые постоянно всплывают</li>
</ul>


<h2>Техническая часть</h2>

<ul>
<li>Backbone (использовал в первый и последний раз)</li>
<li>LESS, шрифтовые иконки</li>
<li>Хранилище данных в LocalStorage браузера</li>
</ul>


<p>Одной из причин написать было желание потрогать backbone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Показать все окна Gnome Terminal в Ubuntu]]></title>
    <link href="http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu/"/>
    <updated>2015-11-16T23:55:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu</id>
    <content type="html"><![CDATA[<p>При работе за компом имею привычку открывать много терминалов,
не группируя их по вкладкам, рабочим столам или менеджером терминалов типа tmux.
При этом терминалы расположены по всему рабочему экрану.</p>

<p>Из-за этого была такая проблема: при переключении на браузер или редактор,
которые обычно занимают по полэкрана, все терминалы оказывались под большими окнами.</p>

<p>Придумал решение: нужно, чтобы можно было выбрать один терминал (который обычно доступен по Alt-Tab),
нажать хоткей и достать все окна этой же программы наверх.</p>

<!-- more -->


<h4>Для этого нужно:</h4>

<ul>
<li>определить текущее окно</li>
<li>определить его класс</li>
<li>найти все окна с тем же классом</li>
<li>активировать каждое из окон</li>
</ul>


<p>Для манипуляции с окнами из консоли использовал <code>xdotool</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo aptitude install xdotool
</span></code></pre></td></tr></table></div></figure>


<p>Через полчаса родился страшный однострочник, в итоге из него получился такой скрипт:</p>

<figure class='code'><figcaption><span>windows-activate</span><a href='https://gist.github.com/popstas/9e1641e39abbda6392f1'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Activate all windows with process name of currently active window</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Получить текущее активное окно, его pid, имя процесса</span>
</span><span class='line'><span class="nv">current_pid</span><span class="o">=</span><span class="k">$(</span>xdotool getwindowpid <span class="k">$(</span>xdotool getactivewindow<span class="k">))</span>
</span><span class='line'><span class="nv">current_name</span><span class="o">=</span><span class="k">$(</span>ps -p <span class="nv">$current_pid</span> -o <span class="nv">comm</span><span class="o">=</span><span class="k">)</span>
</span><span class='line'><span class="nv">clean_name</span><span class="o">=</span><span class="k">${</span><span class="nv">current_name</span><span class="p">%-</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">name</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">$clean_name</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># найти окна процесса (только видимые), активировать каждое из них</span>
</span><span class='line'>xdotool search --onlyvisible --class <span class="s2">&quot;$name&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="p">|</span> xargs -L1 --no-run-if-empty xdotool windowactivate
</span></code></pre></td></tr></table></div></figure>


<h3>Какие были проблемы:</h3>

<ul>
<li>У каждого процесса оказалось штук по 5 &ldquo;окон&rdquo;, которые на самом деле не видны</li>
<li>Текущий процесс <code>gnome-terminal</code> виден в процессах как <code>gnome-terminal-server</code>,
в процессах имя не входит и отображается как <code>gnome-terminal-</code>,
в этом месте был вбит костыль, добавлена обрезка дефиса в конце.</li>
</ul>


<p>Скрипт был сохранен в /usr/local/bin/window-activate и через <code>ccsm</code> (Compiz config settings manager) повешен на хоткей.</p>

<p>Скрипт можно вызывать, передав параметром имя процесса, иначе возьмет его из текущего окна.</p>
]]></content>
  </entry>
  
</feed>
