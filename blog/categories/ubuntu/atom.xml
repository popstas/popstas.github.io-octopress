<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2017-03-04T05:49:31+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Настройка кеширующего прокси Apt-cacher-ng для ускорения тестирования Ansible ролей с Molecule, Gitlab CI и Docker]]></title>
    <link href="http://blog.popstas.ru/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci/"/>
    <updated>2017-02-26T04:14:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci</id>
    <content type="html"><![CDATA[<p>В <a href="/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/">предыдущей статье</a> я настраивал <code>apt-mirror</code> для тех же целей. У того способа нашлось несколько недостатков.</p>

<p>В статье ниже описано, как решить ту же проблему, используя <code>apt-cacher-ng</code>.</p>

<p>Tl;dr: на этот раз все получилось, этот способ меня устроил.</p>

<p><img src="http://blog.popstas.ru/images/2017-02/apt-cacher-ng.png" /></p>

<!-- more -->


<h2>Настройка apt-cacher-ng</h2>

<p>Здесь все довольно просто, проще, чем с <code>apt-mirror</code>.</p>

<pre><code>apt-get install apt-cacher-ng
</code></pre>

<p>В конфиге я задал пароль админа в <code>/etc/apt-cacher-ng/security.conf</code>, он дает право смотреть подробную статистику по cache-hit.</p>

<p>В <code>/etc/apt-cacher-ng/acng.conf</code> интересны следующие строчки:</p>

<ul>
<li><code>ExTreshold: 4</code> - устаревание кеша, в днях. Если файл ни разу не запрашивался дольше указанного времени, он будет удален. Я увеличил до 30 дней</li>
<li><code>PassThroughPattern: .*:443</code> - нужно указать это, чтобы не было проблем с HTTPS репозиториями (об этом ниже).</li>
</ul>


<p>В остальном стандартный конфиг делает следующее:</p>

<ul>
<li>запускает веб-сервер для всего мира на <code>0.0.0.0:3142</code></li>
<li>хостит страничку и информацией о сервисе и статистикой на <a href="http://myserver.ru:3142">http://myserver.ru:3142</a></li>
<li>хранит кеши в <code>/var/cache/apt-cacher-ng</code></li>
</ul>


<p>Также нужно отредактировать файл <code>/etc/apt-cacher-ng/backends_ubuntu</code>, удалив из него лишние зеркала и поставив главное зеркало в начало, иначе рискуете однажды получить 403 ошибку при установке одного из пакетов (об этом чуть ниже). У меня файл такой:
<code>
http://mirror.yandex.ru/ubuntu/
http://archive.ubuntu.com/ubuntu/
</code>
Подробности ремапинга можно почитать <a href="https://www.unix-ag.uni-kl.de/~bloch/acng/html/config-serv.html">в документации</a>. В 2 словах: когда клиент запрашивает пакет, apt-cacher-ng скачивает его не с репозитория, который прописан на клиенте, а с первого зеркала, указанного в файле ремапинга. Второй репозиторий по факту никогда не выбирается.</p>

<p>После этого можно перезапустить сервис:
<code>
service apt-cacher-ng restart
</code></p>

<p>Проверяем, что он поднялся, должен открыться урл <code>http://myserver.ru:3142</code>.</p>

<h3>Ошибка 403 при получении одного из пакетов</h3>

<p>Через некоторое время использования я споткнулся об ошибку:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get install php-common -y
</span><span class='line'>Reading package lists&hellip; Done
</span><span class='line'>Building dependency tree
</span><span class='line'>Reading state information&hellip; Done
</span><span class='line'>The following additional packages will be installed:
</span><span class='line'>  psmisc
</span><span class='line'>The following NEW packages will be installed:
</span><span class='line'>  php-common psmisc
</span><span class='line'>0 upgraded, 2 newly installed, 0 to remove and 7 not upgraded.
</span><span class='line'>Need to get 10.8 kB/58.8 kB of archives.
</span><span class='line'>After this operation, 299 kB of additional disk space will be used.
</span><span class='line'>Err:1 &lt;a href="http://archive.ubuntu.com/ubuntu"&gt;http://archive.ubuntu.com/ubuntu&lt;/a&gt; xenial/main amd64 php-common all 1:35ubuntu6
</span><span class='line'>  403  Forbidden
</span><span class='line'>E: Failed to fetch &lt;a href="http://archive.ubuntu.com/ubuntu/pool/main/p/php-defaults/php-common_35ubuntu6_all.deb"&gt;http://archive.ubuntu.com/ubuntu/pool/main/p/php-defaults/php-common_35ubuntu6_all.deb&lt;/a&gt;  403  Forbidden&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;E: Unable to fetch some archives, maybe run apt-get update or try with &ndash;fix-missing?</span></code></pre></td></tr></table></div></figure></p>

<p>Я стал разбираться, оказалось, что дело в прокси, если его убрать, все становится нормально.</p>

<p>Оказалось, что репозиторий по умолчанию, который прописан в <code>/etc/apt-cacher-ng/backends_ubuntu.default</code> какой-то немного битый и пакет php-common не отдавал. Чтобы этого не произошло, нужно добавить свои репозитории в <code>/etc/apt-cacher-ng/backends_ubuntu</code>.</p>

<p>Solution:
<code>
echo http://archive.ubuntu.com/ubuntu/ &gt; /etc/apt-cacher-ng/backends_ubuntu
service apt-cacher-ng restart
</code></p>

<h3>Ошибка 403 при доступе к HTTPS репозиториям</h3>

<p>В этом месте тоже появляются ошибки, проявляются в ошибках 403 при <code>apt-get update</code>.
Проблема здесь в том, что apt-cacher-ng не может прочитать зашифрованный трафик от https репозиториев, но все равно пытается. Этого можно избежать двумя способами:</p>

<ul>
<li>добавить такие репозитории в исключения</li>
<li>использовать http репозитории в sources, а потом ремапить их на настоящие репозитории в apt-cacher-ng</li>
</ul>


<p>Первый способ позволяет избежать изменения sources для системы-клиента apt-cacher-ng, второй - экономить трафик и для таких репозиториев. Я хочу, чтобы прокси работал максимально прозрачно, поэтому я использую первый способ. За то, какие репозитории обрабатывать, отвечает параметр <code>PassThroughPattern</code>. Нам нужно исключить из регулярного выражения все HTTPS репозитории.</p>

<p>Было:
<code>
PassThroughPattern: ^bugs.debian.org:443
</code></p>

<p>Стало:
<code>
PassThroughPattern: .*:443
</code></p>

<p>О втором способе можно прочитать в <a href="https://blog.packagecloud.io/eng/2015/05/05/using-apt-cacher-ng-with-ssl-tls/">этой статье</a>.</p>

<h2>Настройка на клиентах</h2>

<p>На клиентах нужно добавить один файлик с указанием адреса прокси, <code>sources.list</code> менять не надо:
<code>
echo 'Acquire::http::Proxy "http://myserver.ru:3142";' &gt; /etc/apt/apt.conf.d/00aptproxy
</code></p>

<p>На хосте я этого делать не стал, т.к. у меня там стоит старая Ubuntu 14.04, а тестирую я на Ubuntu 16.04. К слову, apt-cacher-ng это не волнует, он нормально кеширует новые пакеты, не смотря на то, что стоит на старой оси. Как я понимаю, его можно использовать и в смешанном режиме, то есть кешировать пакеты сразу от нескольких версий операционок, но я это не проверял.</p>

<p>Вместо этого я положил файлик с указанием прокси в отдельную папку, откуда я буду пробрасывать его внутрь тестовых контейнеров:
<code>
echo 'Acquire::http::Proxy "http://myserver.ru:3142";' &gt; /usr/local/src/00aptproxy
</code></p>

<h2>Использование с Molecule, Gitlab CI и Travis CI</h2>

<p>Не знаю зачем, но роли я тестирую сразу двумя CI: Gitlab и Travis. В связи с этим появляется проблема: нужно на Gitlab CI использовать один кеширующий сервер, при локальном тестировании другой, а для Travis CI убирать его.</p>

<p>Сложность в том, что Molecule не поддерживает разные конфиги, только умеет использовать в конфигах переменные окружения. Это я и использовал.</p>

<p>Смысл в том, что на разных CI в контейнер будут пробрасываться разные <code>/etc/apt/apt.conf.d/00aptproxy</code>, для Travis это будет просто пустой файл.</p>

<p><code>.travis.yml</code>:
<code>
script:
  - export MOLECULE_APTPROXY_PATH="$PWD/00aptproxy"
  - touch "$MOLECULE_APTPROXY_PATH"
  - molecule --debug test
</code></p>

<p><code>molecule.yml</code>:
<code>
docker:
  containers:
    - name: ansible-role-mysql
      image: ubuntu
      image_version: latest
      volume_mounts:
        - ${MOLECULE_APTPROXY_PATH}:/etc/apt/apt.conf.d/00aptproxy
</code></p>

<p><code>.gitlab-ci.yml</code> я решил не менять, вместо этого я изменил способ регистрации раннеров в Gitlab CI, используются специальные раннеры с проброшенной переменной окружения:</p>

<pre><code>gitlab-ci-multi-runner register -n \
  --executor docker \
  --description "Docker at myserver.ru on popstas/ubuntu-molecule" \
  --docker-image "popstas/ubuntu-molecule:latest" \
  --docker-volumes /var/run/docker.sock:/var/run/docker.sock \
  --env "MOLECULE_APTPROXY_PATH=/usr/local/src/00aptproxy"
</code></pre>

<p>Это сделано потому, что я еще запускаю локальные раннеры, хотелось сделать так, чтобы <code>.gitlab-ci.yml</code> подходил во всех случаях.</p>

<p>На локальной машине можно просто добавить переменные окружения через <code>export</code> прямо в терминале или добавить их в ваш <code>~/.profile</code>, тогда можно просто запускать <code>molecule test</code> и все будет работать.</p>

<h2>Тестирование скорости</h2>

<p>Дополню таблицу из <a href="/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/">прошлой статьи</a>. Естественно, указано время второго прогона apt-cacher-ng для роли, т.к. в первый запуск пакеты еще не скачались, и скорость будет как при использовании стандартного репозитория.</p>

<table>
<thead>
<tr>
<th>Роль                </th>
<th> archive.ubuntu.org </th>
<th> apt-mirror </th>
<th> apt-cacher-ng </th>
<th> Travis CI:</th>
</tr>
</thead>
<tbody>
<tr>
<td>ansible-role-common </td>
<td> 8:04               </td>
<td> 6:18       </td>
<td> 6:30          </td>
<td> <strong>4:32</strong></td>
</tr>
<tr>
<td>ansible-role-mysql  </td>
<td> 3:41               </td>
<td> <strong>3:22</strong>   </td>
<td> 3:26          </td>
<td> 3:46</td>
</tr>
<tr>
<td>ansible-role-zsh    </td>
<td> 3:16               </td>
<td> <strong>2:54</strong>   </td>
<td> 2:56          </td>
<td> 4:08</td>
</tr>
</tbody>
</table>


<p>Как видим, в скорости решение с <code>apt-cacher-ng</code> по сравнению с <code>apt-mirror</code> почти не теряет. Если не видно разницы, зачем тратить лишние 140 Гб?</p>

<p>Кстати, скорость тестирования увеличилась и на других способах, которые я описывал в прошлой статье: если тогда разница между способами была 20-30%, то теперь она сократилась до 10-20%. Это говорит о том, что если ничего не делать и пользоваться стандартными удаленными репозиториями, вы будете больше зависеть от внешних факторов.</p>

<h2>Выводы</h2>

<h3>Минусы:</h3>

<ul>
<li>Подходит только для множественного запуска однотипных установок, в моем случае так и есть</li>
<li>Немного медленнее, чем при использовании зеркала, минусом это назвать сложно, т.к. разница всего 1-3%</li>
<li>Нужно пробрасывать порт через фаервол, если хотите открыть прокси всему миру, я этого делать не стал :)</li>
</ul>


<h3>Плюсы:</h3>

<ul>
<li>Хранит только нужные пакеты</li>
<li>Кеширует не только пакеты из стандартного репозитория, но и внешние пакеты, которые вы добавляете в <code>sources.list</code></li>
<li>Не требует изменения sources.list</li>
<li>Проше настраивать</li>
<li>Не нужен веб-сервер (nginx)</li>
<li>По умолчанию фаервол закрывает вас</li>
</ul>


<p>Как видите, минусы надуманны, а плюсы реальны. На этом история ускорения скачивания пакетов закончена, но остается еще много интересных моментов в тестировании Ansible на Gitlab CI, продолжение следует.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как я создал и отказался от локального репозитория Apt-mirror для Ubuntu для ускорения тестирования Ansible ролей]]></title>
    <link href="http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/"/>
    <updated>2017-02-24T17:39:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker</id>
    <content type="html"><![CDATA[<p>При тестировании плейбуков на чистой Ubuntu (а как же еще?) самые большие накладные расходы по времени (субъективно)
и уж точно самые большие по трафику уходят на установку пакетов из системного репозитория. Особенно это заметно, когда видишь, что один и тот же тест Travis CI прогоняет в 1.5 раза быстрее.</p>

<p>Ниже описано, как создать зеркало из <a href="http://mirror.yandex.ru/ubuntu">http://mirror.yandex.ru/ubuntu</a> и подружить его с Gitlab CI и molecule.</p>

<p>Tl;dr: не делайте локальный репозиторий через <code>apt-mirror</code> для мелких задач, не стоит оно того. Вместо этого нужно поднять кеширующий сервер через <a href="/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci/">apt-cacher-ng</a>.</p>

<p><img src="http://blog.popstas.ru/images/2017-02/apt-mirror.png" /></p>

<!-- more -->


<h2>Настройка apt-mirror</h2>

<p>Для синхронизации локального репозитория с основным вариант один - <code>apt-mirror</code>.
<a href="https://apt-mirror.github.io">Официальный сайт</a> считает нас умными, поэтому все его инструкции заключаются в 3 строчках:
<code>bash
apt-get install apt-mirror
nano /etc/apt/mirror.list
sudo apt-mirror
</code></p>

<p>Все действительно почти так просто. Почти.</p>

<h3>Выбор самого быстрого репозитория</h3>

<p>Пока гуглил тему, случайно наткнулся на <a href="https://hub.docker.com/r/evgeniyklemin/ubuntu-fastest-apt-mirror/">инструкцию</a>, как выбрать самый быстрый репозиторий.
Скорее всего, для нас для всех это будет <a href="http://mirror.yandex.ru/ubuntu,">http://mirror.yandex.ru/ubuntu,</a> но можно в этом убедиться:</p>

<pre><code class="bash">wget -q -nv -O- http://ftp.ru.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-26_amd64.deb &gt; /tmp/netselect_0.3.ds1-26_amd64.deb
dpkg -i /tmp/netselect_0.3.ds1-26_amd64.deb
netselect -s3 -t20 `wget -q -nv -O- https://launchpad.net/ubuntu/+archivemirrors | grep -P -B8 "statusUP|statusSIX" | grep -o -P "(f|ht)tp.*\"" | tr '"\n' '  '`
</code></pre>

<p>Пакета нет в репозитории Ubuntu, поэтому качаем из репозитория Debian
В результате вы получите список из 3 самых быстрых (по пингу) репозиториев:</p>

<pre><code>54 http://mirror.yandex.ru/ubuntu/
89 http://ubuntu.volia.net/ubuntu-archive/
124 http://nl.archive.ubuntu.com/ubuntu/
</code></pre>

<h3>Конфигурация</h3>

<p>Открываем <code>/etc/apt/mirror.list</code>.</p>

<ul>
<li>Меняем <code>archive.ubuntu.com</code> на <code>mirror.yandex.ru</code>.</li>
<li>Убираем <code>multiverse</code> репозиторий (в стандартном Docker контейнере <code>ubuntu</code> его нет, видимо не очень нужен, зато экономим сразу 13 Гб).</li>
<li>Меняем путь хранения зеркала, не забывая после этого скопировать пустой скрипт в новое место <code>/var/spool/apt-mirror/var/postmirror.sh</code>, иначе <code>apt-mirror</code> будет в конце падать с ошибкой. У меня зеркало будет храниться в <code>/var/backups/apt-mirror</code> (на диске с бекапами места много)</li>
</ul>


<p>Это же в виде команд:
<code>bash
sed -i /etc/apt/mirror.list 's/archive.ubuntu.com/mirror.yandex.ru/g'
sed -i /etc/apt/mirror.list 's/ multiverse//g'
sed -i /etc/apt/mirror.list 's/\/var\/spool\/apt-mirror/\var\/backups\/apt-mirror/g'
mkdir -p /var/backups/apt-mirror/var
cp /var/spool/apt-mirror/var/postmirror.sh /var/backups/apt-mirror/var
</code></p>

<p>Добавляем в cron задание по обновлению репозитория, я буду запускать в 1 ночи:
<code>bash
sed -i 's/#0 4/0 1/g' /etc/cron.d/apt-mirror
</code></p>

<p>Настраиваем nginx на отдачу репозитория, у меня конфиг такой:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen 80<span class="p">;</span>
</span><span class='line'>  server_name mirror.myserver.ru<span class="p">;</span>
</span><span class='line'>  root /var/backups/apt-mirror/mirror/mirror.yandex.ru<span class="p">;</span>
</span><span class='line'>  access_log off<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  location / <span class="o">{</span>
</span><span class='line'>    autoindex on<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Все готово, осталось запустить <code>apt-mirror</code> и подождать денек: у меня выкачивалось 142 Гб.
Причем обновления тоже будут весить ощутимо, как я понял: через день я запустил apt-mirror еще раз,
он скачал 1.5 Гб.</p>

<p>Проверяем URL <a href="http://mirror.myserver.ru/,">http://mirror.myserver.ru/,</a> там должен быть доступен каталог <code>ubuntu</code>.</p>

<p>После этого можете сменить системные репозитории в ваших локальных убунтах и наслаждаться скоростью.</p>

<h3>Ошибка при apt-get update: binary-i386/Packages: 404  Not Found</h3>

<p>Хотя нет, насладиться сразу конечно не получилось. По какой-то причине (наверное причина в месте на диске), apt-mirror выкачивает только amd64 пакеты, из-за чего <code>apt-get update</code> ругается:
<code>
W: The repository 'http://apt.myserver.ru/ubuntu xenial-backports Release' does not have a Release file.
W: Failed to fetch http://apt.myserver.ru/ubuntu/dists/xenial/main/binary-i386/Packages: 404  Not Found
W: Failed to fetch http://apt.myserver.ru/ubuntu/dists/xenial-updates/main/binary-i386/Packages: 404  Not Found
E: Some index files failed to download. They have been ignored, or old ones used instead.
</code></p>

<p>Казалось бы ничего страшного, но уверен, что в тестах ненулевой код выхода apt-get будет все останавливать, поэтому придется чинить.</p>

<p>Ошибка есть на <a href="https://askubuntu.com/questions/465303/apt-mirror-error/574141">askubuntu.com</a>, спасибо человеку, который предложил решение и негодовал по поводу того, что есть только в <code>man sources.list</code>.</p>

<p>Решение напрашивается: явно указывать в <code>sources.list</code>, что в репозитории только amd64 пакеты, то есть вместо:
<code>
deb [ arch=amd64 ] http://apt.myserver.ru/ubuntu/ xenial main restricted universe
</code></p>

<p>С настройкой <code>apt-mirror</code> закончили, перейдем к использованию в тестах.</p>

<hr />

<h2>Переключение Docker контейнера на локальный apt репозиторий</h2>

<p><a href="https://github.com/ekino/docker-images/tree/master/apt-mirror">https://github.com/ekino/docker-images/tree/master/apt-mirror</a> - здесь приведено 2 способа настройки репозитория в контейнере, не изменяя его:</p>

<ol>
<li>[Плохой способ] Подмена через DNS</li>
<li>[Хороший способ] Подмена <code>/etc/apt/sources.list</code></li>
</ol>


<p>Я выбрал хороший. Делается это монтированием файла на место <code>/etc/apt/sources.list</code>:</p>

<pre><code class="bash">FQDN="apt.myserver.ru"
cat &lt;&lt;EOF &gt; sources.list-$FQDN
deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial main restricted universe
deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial-updates main restricted universe
deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial-security main restricted universe
EOF
</code></pre>

<p>Чтобы не тащить с собой артефакты, файл создается командой.</p>

<p>После этого проверяем, это должно отработать нормально:
<code>bash
docker run --rm -it -v $(readlink -f sources.list-$FQDN):/etc/apt/sources.list ubuntu:16.04 apt-get update
</code></p>

<p>Если <code>readlink</code> выдает ошибку <code>readlink: illegal option -- f</code>, тогда вы скорее всего сидите на MacOS и вам нужно сделать <code>brew install coreutils</code> и прописать в переменную <code>PATH</code> то, что он просит.</p>

<h2>Сравнение скорости</h2>

<p>Я потратил около 4 часов на то, чтобы настроить локальные репозитории, посмотрим, сколько я сэкономил времени.
Скорость инета у меня 30 мбит.</p>

<p>Я сравнил отработку <code>time molecule test</code> на 3 ansible ролях, вот результаты:</p>

<table>
<thead>
<tr>
<th>Роль                </th>
<th> Стандартный репозиторий </th>
<th> Локальный репозиторий </th>
<th> Travis CI:</th>
</tr>
</thead>
<tbody>
<tr>
<td>ansible-role-common </td>
<td> 8:04                    </td>
<td> 6:18                  </td>
<td> <strong>4:32</strong></td>
</tr>
<tr>
<td>ansible-role-mysql  </td>
<td> 3:41                    </td>
<td> <strong>3:22</strong>              </td>
<td> 3:46</td>
</tr>
<tr>
<td>ansible-role-zsh    </td>
<td> 3:29                    </td>
<td> <strong>2:54</strong>              </td>
<td> 4:08</td>
</tr>
</tbody>
</table>


<hr />

<p>Как видно, прирост небольшой, всего 20-30%.
UPD 26.02.2017: на при написании <a href="/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci/">статьи про apt-cacher-ng</a> я перепроверил результаты и разница сократилась до 10-20%.</p>

<p>Тут надо заметить, что в <code>test</code> входит проверка идемпотентности, где никакие пакеты не ставятся. Тогда я сравнил время выполнения &lsquo;molecule converge&rsquo; для <code>ansible-role-mysql</code> и получил немного лучшие результаты: 2:30 против 3:17, это уже почти в 2 раза быстрее.</p>

<table>
<thead>
<tr>
<th>Роль                </th>
<th> Стандартный репозиторий </th>
<th> Локальный репозиторий</th>
</tr>
</thead>
<tbody>
<tr>
<td>ansible-role-common </td>
<td> 8:15                    </td>
<td> 6:09</td>
</tr>
<tr>
<td>ansible-role-mysql  </td>
<td> 3:17                    </td>
<td> 2:30</td>
</tr>
<tr>
<td>ansible-role-zsh    </td>
<td> 4:05                    </td>
<td> 2:43</td>
</tr>
</tbody>
</table>


<h2>Выводы по поводу apt-mirror</h2>

<p>Результаты меня немного расстроили. Оказалось, что поразительного прироста в скорости, на который я надеялся, не будет.</p>

<h3>Плюсы:</h3>

<ul>
<li>один раз потратил время, чтобы при каждом тесте ждать меньше</li>
<li>уменьшает желание тестировать не на чистой машине</li>
<li>интернет-канал не занимается в рабочее время</li>
</ul>


<h3>Минусы</h3>

<ul>
<li>эффект слабый, 20-30%</li>
<li>сложности с пробросом файла <code>sources.list</code></li>
<li>уход от стандартной конфигурации Gitlab CI</li>
<li>разные конфиги для Travis CI и Gitlab CI</li>
</ul>


<p>На основе этого сделал для себя вывод: это подходит только для локального постоянного применения, в остальных случаях минусы перевешивают.</p>

<h2>Что-то тут не так&hellip;</h2>

<p>После этого я задумался: а как делают &ldquo;большие&rdquo;? Из серьезных решений для локальных репозиториев я знаю только Artifactory. Пошел посмотреть, как у них обстоят дела с зеркалами и <a href="https://www.jfrog.com/knowledge-base/how-to-mirror-a-remote-repository/">нашел</a>: они умеют быть зеркалом, но не рекоменуют их так использовать, т.к. это неэффективно. Вместо этого они предлагают пользоваться ими как кеширующим сервером. Такие дела&hellip;</p>

<p>UPD 26.02.2017: перешел на использование apt-cacher-ng, в моем случае он лучше по всем параметрам, подробности читайте в продолжении</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash on Ubuntu on Windows: первый блин]]></title>
    <link href="http://blog.popstas.ru/blog/2016/04/11/bash-on-ubuntu-on-windows/"/>
    <updated>2016-04-11T05:01:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/04/11/bash-on-ubuntu-on-windows</id>
    <content type="html"><![CDATA[<p>Итак, <a href="http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available/">дождался обновления</a> Windows, поставил в нее Ubuntu <a href="http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/">по инструкции</a>, вот что было дальше:</p>

<p>Tl;dr: оно очень сырое, не работает почти ничего.</p>

<p><img src="/images/2016-04/windows-ubuntu-bash.png"></p>

<!--more -->


<p>Первым делом захотелось родной zsh, берем aptitude, ставим, Ubuntu же!
Шелл открылся под root, так что sudo не нужен.</p>

<pre><code>$ aptitude install zsh
</code></pre>

<p>Конечно, ничего не вышло :) Во-первых, aptitude не нашел файл /var/lock/aptitude,
нет проблем, ставим через <code>apt-get</code>, но оказывается, что нет инета.</p>

<p>Про это есть <a href="https://github.com/Microsoft/CommandLine-Documentation/issues/14">issue#14</a> (а багов за 4 дня открыли 40+), оказалось, дело в DNS, лечится так:</p>

<pre><code>$ echo "nameserver 8.8.8.8" &gt; /etc/resolv.conf
</code></pre>

<p>При этом не заработает ifconfig, ping, nslookup, но пакеты начнут ставиться.
apt-get при установке поругивается, но ставит.</p>

<h1>Zsh</h1>

<pre><code>$ apt-get update &amp;&amp; apt-get install git zsh
</code></pre>

<p>Ок, сработало, ставлю свой <a href="https://github.com/popstas/zsh-config">zsh-config</a>
Что-то пошло не так с пайпами, но в итоге он поставился. Кстати git работает как родной.</p>

<p>Открываю новый терминал, открывается bash, смотрю /etc/passwd, там написано, что
шелл /bin/zsh. Ладно, запускаю zsh вручную, он вывалил кучу ошибок про powerline,
что-то от zsh, никакой красоты не появилось.</p>

<p>Ок, упрощаем, удаляю свой конфиг, открываю чистый zsh - все равно облом.</p>

<p>Ладно, не в zsh счастье (или все-таки в нем?).</p>

<p>Открываю <code>mc</code>, он как бы работает, но после первого нажатия Enter курсоры перестают бегать.
Выходим, идем дальше.</p>

<h1>Python</h1>

<pre><code>$ apt-get install python-pip python-dev
</code></pre>

<p>Все поставилось.
Смотрим pip:</p>

<ul>
<li><code>glances</code> - не работает</li>
<li><a href="http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/">percol</a> - работает!</li>
<li><code>ansible</code> - ругается при запуске про <code>Function not implemented</code></li>
<li><code>ps_mem</code> - конечно нет</li>
<li><code>httpie</code> - работает!</li>
</ul>


<h1>SSH</h1>

<p>Тащим ключ с домашней машины</p>

<pre><code>$ rsync popstas@home:/Users/popstas/.ssh/id_dsa ~/.ssh
</code></pre>

<p>Работает!</p>

<p>Подключаюсь к удаленному хосту - тоже работает!
Там зашел в <code>mc</code>, стало понятно, что глючит терминал: на удаленке курсоры тоже бегают плохо.
Ок, терминал будет, потом.</p>

<h1>PHP</h1>

<pre><code>$ apt-get install php5-cli
</code></pre>

<p>PHP работает.
Composer ставится, но при попытке установить им что-нибудь зависает.</p>

<h1>Nginx</h1>

<p>Ставится, но не стартует, в error.log пишет, что не может прибиндиться к сокету.</p>

<h1>Вывод</h1>

<p>Пользоваться этим сейчас конечно нельзя и в ближайший месяц думаю можно не надеяться.
Я рассчитывал на большее, ну ладно, будем надеяться, что у Microsoft получится сделать
полноценный линукс, хотя видно, что работы тут еще немеряно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 10 Build 14316 со встроенной Ubuntu и Bash через программу Microsoft Insider Preview доступна не всем]]></title>
    <link href="http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available/"/>
    <updated>2016-04-07T00:26:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available</id>
    <content type="html"><![CDATA[<p>Все конечно слышали, что Microsoft и Canonical сговорились и встроили в винду линукс. Так вот, его пока еще нельзя потрогать.</p>

<p>UPD 11.04.2016: сборка 14316 дошла до меня, смотрите инструкцию по настройке.</p>

<ul>
<li><a href="https://github.com/Microsoft/CommandLine-Documentation/issues/5">issue про недоступность сборки 14316</a></li>
<li><a href="http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/">Инструкция по обновлению на русском</a></li>
</ul>


<p><img class="<a" src="href="http://az648995.vo.msecnd.net/win/2016/04/bash-1024x569.png">http://az648995.vo.msecnd.net/win/2016/04/bash-1024x569.png</a>" title="" ></p>

<!-- more -->


<p>Вчера утром пришло письмо от Microsoft:</p>

<blockquote><p>Только что закончилась ежегодная конференция разработчиков Build 2016, на которой мы представили новые функции Windows 10.
Вы сможете в числе первых опробовать эти новые функции, выбрав &ldquo;быстрый&rdquo; или &ldquo;медленный&rdquo; круг обновлений. Подробную информацию о новых возможностях читайте в записи блога Гейба о последней сборке Windows 10 Insider Preview. Обратите внимание, что для участников программы предварительной оценки, которые хотят выполнить чистую установку этой сборки или запустить ее в виртуальной машине, доступны ISO-образы. (на английском языке.)</p></blockquote>

<p>Я конечно пришел домой вечером, скачал ISO, поставил на Virtualbox, сегодня на обеде думал: &ldquo;Приду домой, посмотрю, что там за линукс&rdquo;. Удивлялся, что до сих пор не гуглятся обзоры фичи.</p>

<p>Включил виртуалку, x64, English, что дальше делать - не понятно. Нагуглил официальные страницы фичи:</p>

<ul>
<li><a href="https://blogs.windows.com/windowsexperience/2016/04/06/announcing-windows-10-insider-preview-build-14316/">Анонс билда</a></li>
<li><a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">Видео с конференции BUILD</a></li>
<li><a href="https://github.com/Microsoft/CommandLine-Documentation">Github</a></li>
<li><a href="https://github.com/Microsoft/CommandLine-Documentation/blob/master/commandline/WSL/install_guide.md">Инструкция по включению фичи</a></li>
</ul>


<p>Уже написана <a href="http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/">инструкция по обновлению до Windows subsystem for Linux</a> на русском, но до рабочей фичи ее автор тоже не дошел.</p>

<p>Чтобы обновление пришло, нужно в настройках центра обновлений включить режим разработчика, переключиться на Insider level: fast, обновиться минимум до build 14316</p>

<p>Все стало понятно из этого <a href="https://github.com/Microsoft/CommandLine-Documentation/issues/5">issue</a>, кто-то, включая меня, застрял на сборке 14295.</p>

<p>Ждем.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Показать все окна Gnome Terminal в Ubuntu]]></title>
    <link href="http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu/"/>
    <updated>2015-11-16T23:55:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu</id>
    <content type="html"><![CDATA[<p>При работе за компом имею привычку открывать много терминалов,
не группируя их по вкладкам, рабочим столам или менеджером терминалов типа tmux.
При этом терминалы расположены по всему рабочему экрану.</p>

<p>Из-за этого была такая проблема: при переключении на браузер или редактор,
которые обычно занимают по полэкрана, все терминалы оказывались под большими окнами.</p>

<p>Придумал решение: нужно, чтобы можно было выбрать один терминал (который обычно доступен по Alt-Tab),
нажать хоткей и достать все окна этой же программы наверх.</p>

<!-- more -->


<h4>Для этого нужно:</h4>

<ul>
<li>определить текущее окно</li>
<li>определить его класс</li>
<li>найти все окна с тем же классом</li>
<li>активировать каждое из окон</li>
</ul>


<p>Для манипуляции с окнами из консоли использовал <code>xdotool</code>:</p>

<pre><code>sudo aptitude install xdotool
</code></pre>

<p>Через полчаса родился страшный однострочник, в итоге из него получился такой скрипт:</p>

<pre><code>
# !/bin/bash
# 
# Activate all windows with process name of currently active window

# Получить текущее активное окно, его pid, имя процесса
current_pid=$(xdotool getwindowpid $(xdotool getactivewindow))
current_name=$(ps -p $current_pid -o comm=)
clean_name=${current_name%-}

name=${1:-$clean_name}

# найти окна процесса (только видимые), активировать каждое из них
xdotool search --onlyvisible --class "$name" \
  | xargs -L1 --no-run-if-empty xdotool windowactivate
</code></pre>

<h3>Какие были проблемы:</h3>

<ul>
<li>У каждого процесса оказалось штук по 5 &ldquo;окон&rdquo;, которые на самом деле не видны</li>
<li>Текущий процесс <code>gnome-terminal</code> виден в процессах как <code>gnome-terminal-server</code>,
в процессах имя не входит и отображается как <code>gnome-terminal-</code>,
в этом месте был вбит костыль, добавлена обрезка дефиса в конце.</li>
</ul>


<p>Скрипт был сохранен в /usr/local/bin/window-activate и через <code>ccsm</code> (Compiz config settings manager) повешен на хоткей.</p>

<p>Скрипт можно вызывать, передав параметром имя процесса, иначе возьмет его из текущего окна.</p>
]]></content>
  </entry>
  
</feed>
