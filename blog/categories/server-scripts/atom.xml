<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Server-scripts | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/server-scripts/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2017-02-26T05:19:56+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Извлечение одной из папок в Git репозитории в отдельный репозиторий с сохранением истории - Git-extract-subproject]]></title>
    <link href="http://blog.popstas.ru/blog/2017/02/22/git-extract-subproject-preserving-history/"/>
    <updated>2017-02-22T01:19:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2017/02/22/git-extract-subproject-preserving-history</id>
    <content type="html"><![CDATA[<p>Занялся я тут распиливанием большого проекта (дерево ansible ролей) на отдельные репозитории.</p>

<h3>Для этого надо:</h3>

<ol>
<li>Извлечь директорию подпроекта в отдельный репозиторий</li>
<li>Удалить из проекта папку подпроекта</li>
<li>Добавить в большой проект зависимость от подпроекта</li>
</ol>


<p>Ниже написано, как сделать 1-й шаг одной командой через скрипт <code>git-extract-subproject</code>.</p>

<p><img src="http://blog.popstas.ru/images/2017-02/git-extract-subproject.jpg" /></p>

<!-- more -->


<p>В общем все оказалось просто, за минуту находится статья об этом - <a href="http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/">
Moving Files from one Git Repository to Another, Preserving History</a>, за 10 минут становится понятно, что как работает.</p>

<p>Мне нужно было проделать эту операцию 10+ раз, поэтому написал скрипт, извлекающий репозиторий одной командой.</p>

<h2>Алгоритм извлечения:</h2>

<ol>
<li>Клонировать большой проект во временный репозиторий</li>
<li>Удалить из него все, кроме папки модуля через git-фильтр. При этом переписывается история</li>
<li>Создать чистый репозиторий для нового модуля</li>
<li>Добавить в чистый репозиторий временный, как remote source</li>
<li>Сделать pull из remote source в master</li>
<li>Подчистить следы</li>
</ol>


<p>По идее уже после п.2 временный репозиторий выглядит как готовый модуль, пп.3-6 нужны для того, чтобы не тащить следы истории и настроек родительского проекта в дочерний.</p>

<p>Например, у меня есть репозиторий <code>ansible-server</code>, в нем лежит роль <code>roles/server-scripts</code>. Тогда нужно перейти в папку ansible-server и запустить:</p>

<pre><code>git-extract-subproject roles/server-scripts ansible-role-server-scripts
</code></pre>

<p>После этого рядом с <code>ansible-server</code> создастся готовый проект <code>ansible-role-server-scripts</code>. Остается добавить в него remote origin куда следует и запушить.</p>

<p>В итоге получился репозиторий с историей - <a href="https://github.com/viasite-ansible/ansible-role-server-scripts/commits/master">viasite-ansible/ansible-role-server-scripts</a>.</p>

<p>Код скрипта здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-extract-subproject">popstas/server-scripts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Average: измерение среднего времени выполнения команды в Bash]]></title>
    <link href="http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash/"/>
    <updated>2016-02-29T03:46:56+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash</id>
    <content type="html"><![CDATA[<p>Периодически хочется посчитать среднее время, у меня были такие сценарии:</p>

<ul>
<li>простая проверка скорости загрузки страницы</li>
<li>подбор оптимальных параметров к команде</li>
<li>сравнение разных команд</li>
</ul>


<p>Раньше я просто запускал несколько раз с <code>time</code>, смотрел результат, у уме делил.
Но мне это надоело, поэтому написал скрипт <code>average</code>.</p>

<!-- more -->


<p>Код лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/average">https://github.com/popstas/server-scripts/blob/master/bin/average</a></p>

<p>Поставить можно так:
<code>
curl -s "https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average" &gt; /usr/local/bin/average
chmod +x /usr/local/bin/average
</code></p>

<p>Использовать можно так:</p>

<p>Запуск команды по умолчанию, 5 циклов:
<code>
average 'command'
</code></p>

<p>Запуск команды с указанным кол-вом циклов:
<code>
average 10 'command'
</code></p>

<p>Запуск команды с передачей кол-ва циклов через переменную окружения:
<code>
export CYCLES=5
average 'command'
</code></p>

<p>Чтобы не показывать вывод команды, можно обрезать его через tail:
<code>
average 'command' | tail -n1
</code></p>

<h3>Узнать среднее время загрузки страницы:</h3>

<p>С учетом кэша:
<code>
average 'curl -s "http://example.com/" &gt; /dev/null'
</code></p>

<p>В обход кэша:
<code>
average 'curl -s "http://example.com/?t=$RANDOM" &gt; /dev/null'
</code></p>

<hr />

<h3>Продвинутое использование</h3>

<p>Мне надо было узнать оптимальное количество параллельных процессов для запуска тестов,
теперь я могу узнать это запуском одной команды:
<code>
for p in {1..10}; do echo "$p" - $(average "vendor/bin/paratest -p $p" | tail -n1); done
</code>
Команда переберет кол-во процессов от 1 до 10, по каждой итерации выведет среднее время.</p>

<p>После запуска получил такие результаты:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for p in {1..10}; do echo &ldquo;$p&rdquo; - $(average &ldquo;vendor/bin/paratest -p $p&rdquo; | tail -n1); done&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1 - 1 loops, best of 5: 13.9 sec per loop
</span><span class='line'>2 - 1 loops, best of 5: 7.51 sec per loop
</span><span class='line'>3 - 1 loops, best of 5: 5.51 sec per loop
</span><span class='line'>4 - 1 loops, best of 5: 4.51 sec per loop
</span><span class='line'>5 - 1 loops, best of 5: 4.42 sec per loop
</span><span class='line'>6 - 1 loops, best of 5: 4.71 sec per loop
</span><span class='line'>7 - 1 loops, best of 5: 4.21 sec per loop
</span><span class='line'>8 - 1 loops, best of 5: 4.23 sec per loop
</span><span class='line'>9 - 1 loops, best of 5: 4.13 sec per loop
</span><span class='line'>10 - 1 loops, best of 5: 4.33 sec per loop</span></code></pre></td></tr></table></div></figure></p>

<p>Видно, что после 4 потоков разницы почти нет, а вот комп от запуска кучи параллельных процессов тормозит
очень даже заметно.</p>

<p>Конечно, в этом случае много ума не надо, чтобы понять, что кол-во процессов должно быть по кол-ву ядер, но я что-то засомневался :)</p>
]]></content>
  </entry>
  
</feed>
