<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gitlab | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/gitlab/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2016-04-07T00:50:32+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Интеграция Git, Gitlab и Planfix почти как на Github]]></title>
    <link href="http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration/"/>
    <updated>2016-03-02T00:49:29+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration</id>
    <content type="html"><![CDATA[<p>Распробовал тут на неделе интеграцию задач Github и самого Git issue tracker.</p>

<p>Ниже будет написано, как настроить в <a href="https://planfix.ru/">Планфиксе</a> такое поведение:</p>

<ul>
<li>В коммите упоминаем задачу, например, <code>Правки футера шаблона, https://test.planfix.ru/task/123456</code></li>
<li>После push в удаленный репозиторий в упомянутой задаче появляется комментарий с текстом коммита и ссылкой на страницу коммита на Gitlab, если проект подключен к репозиторию.</li>
</ul>


<p>Tl;dr: настраивается post-receive hook в Git на удаленном сервере, после каждого пуша анализируются сообщения пришедших коммитов, коммиты, содержащие ссылки на задачи отправляются в задачи по email.</p>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p><img src="/images/2016-03/planfix_logo.png"></p>

<!-- more -->


<p>Здесь надо в 2 словах рассказать о нашем workflow:</p>

<ul>
<li>Компания занимается разработкой и поддержкой около 100 сайтов.</li>
<li>Каждый сайт использует Git, репозиторий лежит прямо в корне сайта, bare репозитории отсутствуют.</li>
<li>Часто бывают мелкие правки на разных сайтах.</li>
<li>90% сайтов на Drupal 7, в котором половина хранится в базе данных.</li>
<li>Во время правки контент-менеджер или клиент могут пользоваться сайтом и менять на нем данные</li>
<li>Разработчик выкачивает проект в PhpStorm, настаивает сохранение по Ctrl+S изменений на боевом сайте, таким образом получается, что когда приходит время пушить, на удаленном сервере фактически уже есть все изменения.</li>
<li>Разработчик также может напрямую править код сайта на удаленном сервере по SFTP, не выкачивая проект, после чего зайти по SSH на удаленный сервер и сделать коммит прямо оттуда.</li>
<li>Git по сути используется не для доставки изменений на боевой сайт, а для их доставки на компы разработчиков и ведения журнала изменений сайта.</li>
</ul>


<h2>Github issues</h2>

<p>Кто не знает про issues гитхаба, расскажу вкратце о его фишках:</p>

<ul>
<li>В задачах можно ссылаться на коммиты и другие задачи по номерам, они автоматически становятся ссылками.</li>
<li>В коммитах можно ссылаться на задачи так же: <code>#123</code>, такой коммит автоматом упоминается в задаче.</li>
<li>В PhpStorm можно смотреть список открытых issues и создавать из них задачи в IDE, что позволяет автоматом создавать чейнджлист, ветку для выполнения задачи, в коммите сразу будет ссылка на задачу (это все по желанию).</li>
<li>Можно закрывать задачу прямо из коммита, для этого достаточно упомянуть его рядом с одним из ключевых слов, например, <code>closes #123</code> после пуша в гитхаб закроет указанную задачу.</li>
</ul>


<p>А главное, что все связано и из любого места можно перейти на связанные действия.</p>

<p>Я уже краем уха слышал и видел обо всем этом и видел в чужих репозиториях, но вся картина нарисовалась только после использования. Да и к тому же на гитхабе до этого сталкивался только с pull-request'ами, там немного другое поведение.</p>

<h2>PhpStorm tasks</h2>

<p>В PhpStorm есть интеграция с менеджерами задач, Github там конечно есть, Планфикса там конечно нет, но зато если у менеджера задач есть API, можно интегрировать неподдерживаемый сервис. У Планфикса API есть, но из коробки он не подойдет для этой интеграции, нужно писать свои обертки. В общем-то это дает не много, всего лишь можно будет получать список задач по команде из шторма, и дописывать в коммит ссылку на задачу.</p>

<p>Кстати таски в шторме помогают и без интеграции с трекером: Ctrl+Shift+A - open task, автоматом чистятся все вкладки (создается контекст задачи), создается ветка в гите, changelist, по close task - коммит, я недавно начал пользоваться.</p>

<p>Но гораздо интереснее интеграция в другую сторону: ссылки из задач на коммиты.</p>

<p>Когда я разобрался с тем, как устроена интеграция задач в гитхабе, до меня быстро дошло: просто менеджер задач должен уметь парсить текст коммита, приходящий из гита и делать на основе этого какие-то действия. С этим тоже пока облом: в Планфиксе на данный момент нет обработки писем, прилетающих в задачи, зато <a href="https://planfix.ru/docs/%D0%9A%D0%B0%D0%BA_%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D1%83_%D0%BF%D0%BE_e-mail%3F">есть обработка писем</a>, приходящих на email юзера, что позволяет надеяться на появление обработки писем, приходящих на email задачи.</p>

<h2>Gitlab</h2>

<p>Самые активные проекты мы дублируем на наш внутренний Gitlab. Использование довольно извращенное, Gitlab сейчас никак не участвует в рабочем процессе, являясь просто зеркалом и веб-интерфейсом для просмотра коммитов.</p>

<p>На машине разработчика настраивается <code>pre-push</code> хук, который пушит также в Gitlab:</p>

<pre><code>#!/bin/bash

remote="$1"

if [ "$remote" != "gitlab" ] &amp;&amp; [ "$(git remote show | grep -c "gitlab")" = 1 ]; then
        git push gitlab master
fi
</code></pre>

<h2>Git и Planfix</h2>

<p>Никакой готовой интеграции между Git и Планфиксом нет, зато обе системы гибкие и позволяют лепить уникальные решения без больших усилий.</p>

<p>Git поддерживает хуки: скрипты, запускающиеся по определенным событиям.</p>

<p>У каждой задачи в Планфиксе есть свой email адрес, если послать на него письмо, оно придет в задачу в виде комментария, если с email отправителя связан пользователь, то письмо придет как будто от него.</p>

<p>Значит нам нужно отправлять email из Git в Планфикс на адрес задачи.</p>

<h1>Связываем все вместе</h1>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p>Чтобы подключить хук, надо положить скрипт в папку <code>.git/hooks/post-receive</code> и сделать его исполняемым, для этого надо выполнить в корне проекта:
<code>
curl -s "https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average" &gt; .git/hooks/post-receive
chmod +x .git/hooks/post-receive
</code></p>

<p>Так как у нас много проектов, я храню его в отдельной общей папке, а в каждом репозитории создаю символическую ссылку на него.</p>

<p>Хук получает список коммитов, пришедших с последним пушем, находит первую ссылку на задачу Планфикса и отправляет туда письмо.</p>

<h4>О письме</h4>

<ul>
<li><strong>Отправитель</strong>: email того, кто сделал коммит. По этой причине email в git config и email в профиле юзера Планфикса должны совпадать.</li>
<li><strong>Получатель</strong>: email задачи Планфикса</li>
<li><strong>Тема письма</strong>: <code>@commit @nonotify</code>, @nonotify для того, чтобы не уведомлять всех участников задачи о коммите, <code>@commit</code> ничего не значит, может быть потом пригодится для поиска таких комментов, хотя в отчетах текст комментария все равно использовать нельзя.</li>
<li><strong>Текст письма</strong>: текст коммита. Если репозиторий имеет зеркало на Gitlab, то в конец текста будет добавлена ссылка на коммит.</li>
</ul>


<p>Чтобы хук добавлял ссылку на Gitlab, не придумал ничего лучше, чем добавить remote <code>gitlab</code>:
<code>
git remote add gitlab ssh://git@org.ru:10022/sites/test.ru.git
</code></p>

<p>После этого хук будет извлекать из этого адреса URL <a href="http://org.ru/sites/test,">http://org.ru/sites/test,</a> который является главной страницей репозитория. Сайт при всем при этом не имеет доступа к Gitlab, поэтому push и pull в этот remote работать не будут.</p>
]]></content>
  </entry>
  
</feed>
