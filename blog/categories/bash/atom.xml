<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2016-01-31T01:56:01+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Быстрое обновление PhpStorm EAP на Mac OS через Bash]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os/"/>
    <updated>2016-01-17T07:50:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os</id>
    <content type="html"><![CDATA[<p>Надоело постоянно обновлять PhpStorm руками. На Ubuntu последнее время делал это с помощью ansible,
под Mac этот плейбук не расчитан, к тому же версию ему надо было указвать вручную.
Поэтому написал скрипт, не совместимый с Ubuntu :)</p>

<p><img class="<a" src="href="http://blog.jetbrains.com/phpstorm/files/2016/01/PhpStorm11EAP_splash_2@2x.png">http://blog.jetbrains.com/phpstorm/files/2016/01/PhpStorm11EAP_splash_2@2x.png</a>"></p>

<!-- more -->


<p>Что он делает:</p>

<ul>
<li>идет на страницу EAP, находит там версию</li>
<li>проверяет, что на компе стоит другая версия EAP</li>
<li>качает dmg в папку Загрузки</li>
<li>монтирует образ</li>
<li>завершает PhpStorm, если он открыт</li>
<li>удаляет текущую версию и копирует новую в папку /Applications</li>
<li>запускает новую версию</li>
</ul>


<p>Поставить можно так:
<code>
curl -s "https://gist.githubusercontent.com/popstas/613a72a34576b85caec4/raw/644f457ed0187ab0d1207576e925c06260451131/phpstorm-eap-update.sh" &gt; /usr/local/bin/phpstorm-eap-update
chmod +x /usr/local/bin/phpstorm-eap-update
</code></p>

<p>После чего можно обновлять просто запуском <code>phpstorm-eap-update</code>.
По идее можно даже в cron его засунуть, чтобы совсем автомат, но я и так узнаю о новой версии из rss.</p>

<p>Код лежит здесь - <a href="https://gist.github.com/popstas/613a72a34576b85caec4">https://gist.github.com/popstas/613a72a34576b85caec4</a></p>

<p>В PhpStorm 11 из фич ничего особенного не нашел, зато с этой версии он перешел на использование Java 8,
не знаю, в этом ли дело, но у меня он вроде перестал тормозить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интерактивная Zsh History с поиском и скроллом, Percol]]></title>
    <link href="http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/"/>
    <updated>2015-12-10T19:55:20+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search</id>
    <content type="html"><![CDATA[<p>Если кто не знает, в bash/zsh есть поиск по истории комманд, если нажать <code>Ctrl+R</code> и начать набирать
команду, отобразится последняя команда из истории, для навигации можно использовать
<code>Ctrl+R</code>, <code>Ctrl+Shift+R</code>. При этом видно одновременно видно только одну команду из истории.</p>

<p>Утилита <a href="https://github.com/mooz/percol#zsh-history-search">percol</a> решает эту проблему.</p>

<p><img src="/images/2015-12/percol.gif"></p>

<!-- more -->


<p>Собственно по ссылке выше готовый конфиг для zsh. Я немного изменил его под себя,
чтобы использовать percol не только для поиска по истории:</p>

<pre><code class="bash zsh-percol https://github.com/popstas/zsh-config/blob/master/.zshrc">function exists { which $1 &amp;&gt; /dev/null }
if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac &amp;&amp; tac="gtac" || { exists tac &amp;&amp; tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history

    # percol based grep
    g() { percol --match-method regex --query="$*"; }
fi
</code></pre>

<p>Код я добавил в <a href="https://github.com/popstas/zsh-config">свой .zshrc</a>. Если <a href="https://github.com/robbyrussell/oh-my-zsh/pull/4582">этот пулл реквест</a> примут, то данный код появится в составе
<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> в виде плагина <code>percol</code>.</p>

<p>Код полностью взят со страницы percol, от себя добавил функцию g(), она кстати конфиликтует с плагином git для oh-my-zsh,
зато теперь я могу писать что-то вроде:
<code>bash
find . -type file | g
</code>
для интерактивного выбора результатов поиска и просто для замены grep. При этом доступен мультивыбор по <code>Ctrl+Space</code>.</p>

<p>Пример посложнее:
<code>
vim $(find -name "*.markdown" | g)
</code>
После запуска откроется список всех <code>.markdown</code> файлов в текущей и вложенных папках, выбранный файл сразу откроется в Vim.
Это как будто у вас появилась возможность приделывать midnight commander к результатам поиска!</p>

<p>Смотрите больше интересных примеров <a href="https://github.com/mooz/percol">на странице проекта</a>.</p>

<p>Надо сказать, что на github есть программы с таким же функционалом, как у percol, я об этом узнал на странице самого percol.
Там есть peco, клон percol на Go (а значит поставляется в виде одного бинарника). Мне проще через pip установить percol, так
что с аналогами не сравнивал.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Показать все окна Gnome Terminal в Ubuntu]]></title>
    <link href="http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu/"/>
    <updated>2015-11-16T23:55:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu</id>
    <content type="html"><![CDATA[<p>При работе за компом имею привычку открывать много терминалов,
не группируя их по вкладкам, рабочим столам или менеджером терминалов типа tmux.
При этом терминалы расположены по всему рабочему экрану.</p>

<p>Из-за этого была такая проблема: при переключении на браузер или редактор,
которые обычно занимают по полэкрана, все терминалы оказывались под большими окнами.</p>

<p>Придумал решение: нужно, чтобы можно было выбрать один терминал (который обычно доступен по Alt-Tab),
нажать хоткей и достать все окна этой же программы наверх.</p>

<!-- more -->


<h4>Для этого нужно:</h4>

<ul>
<li>определить текущее окно</li>
<li>определить его класс</li>
<li>найти все окна с тем же классом</li>
<li>активировать каждое из окон</li>
</ul>


<p>Для манипуляции с окнами из консоли использовал <code>xdotool</code>:
<code>bash
sudo aptitude install xdotool
</code></p>

<p>Через полчаса родился страшный однострочник, в итоге из него получился такой скрипт:</p>

<pre><code class="bash windows-activate https://gist.github.com/popstas/9e1641e39abbda6392f1">#!/bin/bash
# 
# Activate all windows with process name of currently active window

# Получить текущее активное окно, его pid, имя процесса
current_pid=$(xdotool getwindowpid $(xdotool getactivewindow))
current_name=$(ps -p $current_pid -o comm=)
clean_name=${current_name%-}

name=${1:-$clean_name}

# найти окна процесса (только видимые), активировать каждое из них
xdotool search --onlyvisible --class "$name" \
  | xargs -L1 --no-run-if-empty xdotool windowactivate
</code></pre>

<h3>Какие были проблемы:</h3>

<ul>
<li>У каждого процесса оказалось штук по 5 &ldquo;окон&rdquo;, которые на самом деле не видны</li>
<li>Текущий процесс <code>gnome-terminal</code> виден в процессах как <code>gnome-terminal-server</code>,
в процессах имя не входит и отображается как <code>gnome-terminal-</code>,
в этом месте был вбит костыль, добавлена обрезка дефиса в конце.</li>
</ul>


<p>Скрипт был сохранен в /usr/local/bin/window-activate и через <code>ccsm</code> (Compiz config settings manager) повешен на хоткей.</p>

<p>Скрипт можно вызывать, передав параметром имя процесса, иначе возьмет его из текущего окна.</p>
]]></content>
  </entry>
  
</feed>
