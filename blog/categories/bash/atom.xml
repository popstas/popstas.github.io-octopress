<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2017-02-22T01:45:47+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Извлечение одной из папок в Git репозитории в отдельный репозиторий с сохранением истории - Git-extract-subproject]]></title>
    <link href="http://blog.popstas.ru/blog/2017/02/22/git-extract-subproject-preserving-history/"/>
    <updated>2017-02-22T01:19:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2017/02/22/git-extract-subproject-preserving-history</id>
    <content type="html"><![CDATA[<p>Занялся я тут распиливанием большого проекта (дерево ansible ролей) на отдельные репозитории.</p>

<h3>Для этого надо:</h3>

<ol>
<li>Извлечь директорию подпроекта в отдельный репозиторий</li>
<li>Удалить из проекта папку подпроекта</li>
<li>Добавить в большой проект зависимость от подпроекта</li>
</ol>


<p>Ниже написано, как сделать 1-й шаг одной командой через скрипт <code>git-extract-subproject</code>.</p>

<p><img src="http://blog.popstas.ru/images/2017-02/git-extract-subproject.jpg" /></p>

<!-- more -->


<p>В общем все оказалось просто, за минуту находится статья об этом - <a href="http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/">
Moving Files from one Git Repository to Another, Preserving History</a>, за 10 минут становится понятно, что как работает.</p>

<p>Мне нужно было проделать эту операцию 10+ раз, поэтому написал скрипт, извлекающий репозиторий одной командой.</p>

<h2>Алгоритм извлечения:</h2>

<ol>
<li>Клонировать большой проект во временный репозиторий</li>
<li>Удалить из него все, кроме папки модуля через git-фильтр. При этом переписывается история</li>
<li>Создать чистый репозиторий для нового модуля</li>
<li>Добавить в чистый репозиторий временный, как remote source</li>
<li>Сделать pull из remote source в master</li>
<li>Подчистить следы</li>
</ol>


<p>По идее уже после п.2 временный репозиторий выглядит как готовый модуль, пп.3-6 нужны для того, чтобы не тащить следы истории и настроек родительского проекта в дочерний.</p>

<p>Например, у меня есть репозиторий <code>ansible-server</code>, в нем лежит роль <code>roles/server-scripts</code>. Тогда нужно перейти в папку ansible-server и запустить:</p>

<pre><code>git-extract-subproject roles/server-scripts ansible-role-server-scripts
</code></pre>

<p>После этого рядом с <code>ansible-server</code> создастся готовый проект <code>ansible-role-server-scripts</code>. Остается добавить в него remote origin куда следует и запушить.</p>

<p>В итоге получился репозиторий с историей - <a href="https://github.com/viasite-ansible/ansible-role-server-scripts/commits/master">viasite-ansible/ansible-role-server-scripts</a>.</p>

<p>Код скрипта здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-extract-subproject">popstas/server-scripts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash on Ubuntu on Windows: первый блин]]></title>
    <link href="http://blog.popstas.ru/blog/2016/04/11/bash-on-ubuntu-on-windows/"/>
    <updated>2016-04-11T05:01:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/04/11/bash-on-ubuntu-on-windows</id>
    <content type="html"><![CDATA[<p>Итак, <a href="http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available/">дождался обновления</a> Windows, поставил в нее Ubuntu <a href="http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/">по инструкции</a>, вот что было дальше:</p>

<p>Tl;dr: оно очень сырое, не работает почти ничего.</p>

<p><img src="/images/2016-04/windows-ubuntu-bash.png"></p>

<!--more -->


<p>Первым делом захотелось родной zsh, берем aptitude, ставим, Ubuntu же!
Шелл открылся под root, так что sudo не нужен.</p>

<pre><code>$ aptitude install zsh
</code></pre>

<p>Конечно, ничего не вышло :) Во-первых, aptitude не нашел файл /var/lock/aptitude,
нет проблем, ставим через <code>apt-get</code>, но оказывается, что нет инета.</p>

<p>Про это есть <a href="https://github.com/Microsoft/CommandLine-Documentation/issues/14">issue#14</a> (а багов за 4 дня открыли 40+), оказалось, дело в DNS, лечится так:</p>

<pre><code>$ echo "nameserver 8.8.8.8" &gt; /etc/resolv.conf
</code></pre>

<p>При этом не заработает ifconfig, ping, nslookup, но пакеты начнут ставиться.
apt-get при установке поругивается, но ставит.</p>

<h1>Zsh</h1>

<pre><code>$ apt-get update &amp;&amp; apt-get install git zsh
</code></pre>

<p>Ок, сработало, ставлю свой <a href="https://github.com/popstas/zsh-config">zsh-config</a>
Что-то пошло не так с пайпами, но в итоге он поставился. Кстати git работает как родной.</p>

<p>Открываю новый терминал, открывается bash, смотрю /etc/passwd, там написано, что
шелл /bin/zsh. Ладно, запускаю zsh вручную, он вывалил кучу ошибок про powerline,
что-то от zsh, никакой красоты не появилось.</p>

<p>Ок, упрощаем, удаляю свой конфиг, открываю чистый zsh - все равно облом.</p>

<p>Ладно, не в zsh счастье (или все-таки в нем?).</p>

<p>Открываю <code>mc</code>, он как бы работает, но после первого нажатия Enter курсоры перестают бегать.
Выходим, идем дальше.</p>

<h1>Python</h1>

<pre><code>$ apt-get install python-pip python-dev
</code></pre>

<p>Все поставилось.
Смотрим pip:</p>

<ul>
<li><code>glances</code> - не работает</li>
<li><a href="http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/">percol</a> - работает!</li>
<li><code>ansible</code> - ругается при запуске про <code>Function not implemented</code></li>
<li><code>ps_mem</code> - конечно нет</li>
<li><code>httpie</code> - работает!</li>
</ul>


<h1>SSH</h1>

<p>Тащим ключ с домашней машины</p>

<pre><code>$ rsync popstas@home:/Users/popstas/.ssh/id_dsa ~/.ssh
</code></pre>

<p>Работает!</p>

<p>Подключаюсь к удаленному хосту - тоже работает!
Там зашел в <code>mc</code>, стало понятно, что глючит терминал: на удаленке курсоры тоже бегают плохо.
Ок, терминал будет, потом.</p>

<h1>PHP</h1>

<pre><code>$ apt-get install php5-cli
</code></pre>

<p>PHP работает.
Composer ставится, но при попытке установить им что-нибудь зависает.</p>

<h1>Nginx</h1>

<p>Ставится, но не стартует, в error.log пишет, что не может прибиндиться к сокету.</p>

<h1>Вывод</h1>

<p>Пользоваться этим сейчас конечно нельзя и в ближайший месяц думаю можно не надеяться.
Я рассчитывал на большее, ну ладно, будем надеяться, что у Microsoft получится сделать
полноценный линукс, хотя видно, что работы тут еще немеряно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 10 Build 14316 со встроенной Ubuntu и Bash через программу Microsoft Insider Preview доступна не всем]]></title>
    <link href="http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available/"/>
    <updated>2016-04-07T00:26:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available</id>
    <content type="html"><![CDATA[<p>Все конечно слышали, что Microsoft и Canonical сговорились и встроили в винду линукс. Так вот, его пока еще нельзя потрогать.</p>

<p>UPD 11.04.2016: сборка 14316 дошла до меня, смотрите инструкцию по настройке.</p>

<ul>
<li><a href="https://github.com/Microsoft/CommandLine-Documentation/issues/5">issue про недоступность сборки 14316</a></li>
<li><a href="http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/">Инструкция по обновлению на русском</a></li>
</ul>


<p><img class="<a" src="href="http://az648995.vo.msecnd.net/win/2016/04/bash-1024x569.png">http://az648995.vo.msecnd.net/win/2016/04/bash-1024x569.png</a>" title="" ></p>

<!-- more -->


<p>Вчера утром пришло письмо от Microsoft:</p>

<blockquote><p>Только что закончилась ежегодная конференция разработчиков Build 2016, на которой мы представили новые функции Windows 10.
Вы сможете в числе первых опробовать эти новые функции, выбрав &ldquo;быстрый&rdquo; или &ldquo;медленный&rdquo; круг обновлений. Подробную информацию о новых возможностях читайте в записи блога Гейба о последней сборке Windows 10 Insider Preview. Обратите внимание, что для участников программы предварительной оценки, которые хотят выполнить чистую установку этой сборки или запустить ее в виртуальной машине, доступны ISO-образы. (на английском языке.)</p></blockquote>

<p>Я конечно пришел домой вечером, скачал ISO, поставил на Virtualbox, сегодня на обеде думал: &ldquo;Приду домой, посмотрю, что там за линукс&rdquo;. Удивлялся, что до сих пор не гуглятся обзоры фичи.</p>

<p>Включил виртуалку, x64, English, что дальше делать - не понятно. Нагуглил официальные страницы фичи:</p>

<ul>
<li><a href="https://blogs.windows.com/windowsexperience/2016/04/06/announcing-windows-10-insider-preview-build-14316/">Анонс билда</a></li>
<li><a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">Видео с конференции BUILD</a></li>
<li><a href="https://github.com/Microsoft/CommandLine-Documentation">Github</a></li>
<li><a href="https://github.com/Microsoft/CommandLine-Documentation/blob/master/commandline/WSL/install_guide.md">Инструкция по включению фичи</a></li>
</ul>


<p>Уже написана <a href="http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/">инструкция по обновлению до Windows subsystem for Linux</a> на русском, но до рабочей фичи ее автор тоже не дошел.</p>

<p>Чтобы обновление пришло, нужно в настройках центра обновлений включить режим разработчика, переключиться на Insider level: fast, обновиться минимум до build 14316</p>

<p>Все стало понятно из этого <a href="https://github.com/Microsoft/CommandLine-Documentation/issues/5">issue</a>, кто-то, включая меня, застрял на сборке 14295.</p>

<p>Ждем.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интеграция Git, Gitlab и Planfix почти как на Github]]></title>
    <link href="http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration/"/>
    <updated>2016-03-02T00:49:29+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration</id>
    <content type="html"><![CDATA[<p>Распробовал тут на неделе интеграцию задач Github и самого Git issue tracker.</p>

<p>Ниже будет написано, как настроить в <a href="https://planfix.ru/">Планфиксе</a> такое поведение:</p>

<ul>
<li>В коммите упоминаем задачу, например, <code>Правки футера шаблона, https://test.planfix.ru/task/123456</code></li>
<li>После push в удаленный репозиторий в упомянутой задаче появляется комментарий с текстом коммита и ссылкой на страницу коммита на Gitlab, если проект подключен к репозиторию.</li>
</ul>


<p>Tl;dr: настраивается post-receive hook в Git на удаленном сервере, после каждого пуша анализируются сообщения пришедших коммитов, коммиты, содержащие ссылки на задачи отправляются в задачи по email.</p>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p><img src="/images/2016-03/planfix_logo.png"></p>

<!-- more -->


<p>Здесь надо в 2 словах рассказать о нашем workflow:</p>

<ul>
<li>Компания занимается разработкой и поддержкой около 100 сайтов.</li>
<li>Каждый сайт использует Git, репозиторий лежит прямо в корне сайта, bare репозитории отсутствуют.</li>
<li>Часто бывают мелкие правки на разных сайтах.</li>
<li>90% сайтов на Drupal 7, в котором половина хранится в базе данных.</li>
<li>Во время правки контент-менеджер или клиент могут пользоваться сайтом и менять на нем данные</li>
<li>Разработчик выкачивает проект в PhpStorm, настаивает сохранение по Ctrl+S изменений на боевом сайте, таким образом получается, что когда приходит время пушить, на удаленном сервере фактически уже есть все изменения.</li>
<li>Разработчик также может напрямую править код сайта на удаленном сервере по SFTP, не выкачивая проект, после чего зайти по SSH на удаленный сервер и сделать коммит прямо оттуда.</li>
<li>Git по сути используется не для доставки изменений на боевой сайт, а для их доставки на компы разработчиков и ведения журнала изменений сайта.</li>
</ul>


<h2>Github issues</h2>

<p>Кто не знает про issues гитхаба, расскажу вкратце о его фишках:</p>

<ul>
<li>В задачах можно ссылаться на коммиты и другие задачи по номерам, они автоматически становятся ссылками.</li>
<li>В коммитах можно ссылаться на задачи так же: <code>#123</code>, такой коммит автоматом упоминается в задаче.</li>
<li>В PhpStorm можно смотреть список открытых issues и создавать из них задачи в IDE, что позволяет автоматом создавать чейнджлист, ветку для выполнения задачи, в коммите сразу будет ссылка на задачу (это все по желанию).</li>
<li>Можно закрывать задачу прямо из коммита, для этого достаточно упомянуть его рядом с одним из ключевых слов, например, <code>closes #123</code> после пуша в гитхаб закроет указанную задачу.</li>
</ul>


<p>А главное, что все связано и из любого места можно перейти на связанные действия.</p>

<p>Я уже краем уха слышал и видел обо всем этом и видел в чужих репозиториях, но вся картина нарисовалась только после использования. Да и к тому же на гитхабе до этого сталкивался только с pull-request'ами, там немного другое поведение.</p>

<h2>PhpStorm tasks</h2>

<p>В PhpStorm есть интеграция с менеджерами задач, Github там конечно есть, Планфикса там конечно нет, но зато если у менеджера задач есть API, можно интегрировать неподдерживаемый сервис. У Планфикса API есть, но из коробки он не подойдет для этой интеграции, нужно писать свои обертки. В общем-то это дает не много, всего лишь можно будет получать список задач по команде из шторма, и дописывать в коммит ссылку на задачу.</p>

<p>Кстати таски в шторме помогают и без интеграции с трекером: Ctrl+Shift+A - open task, автоматом чистятся все вкладки (создается контекст задачи), создается ветка в гите, changelist, по close task - коммит, я недавно начал пользоваться.</p>

<p>Но гораздо интереснее интеграция в другую сторону: ссылки из задач на коммиты.</p>

<p>Когда я разобрался с тем, как устроена интеграция задач в гитхабе, до меня быстро дошло: просто менеджер задач должен уметь парсить текст коммита, приходящий из гита и делать на основе этого какие-то действия. С этим тоже пока облом: в Планфиксе на данный момент нет обработки писем, прилетающих в задачи, зато <a href="https://planfix.ru/docs/%D0%9A%D0%B0%D0%BA_%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D1%83_%D0%BF%D0%BE_e-mail%3F">есть обработка писем</a>, приходящих на email юзера, что позволяет надеяться на появление обработки писем, приходящих на email задачи.</p>

<h2>Gitlab</h2>

<p>Самые активные проекты мы дублируем на наш внутренний Gitlab. Использование довольно извращенное, Gitlab сейчас никак не участвует в рабочем процессе, являясь просто зеркалом и веб-интерфейсом для просмотра коммитов.</p>

<p>На машине разработчика настраивается <code>pre-push</code> хук, который пушит также в Gitlab:</p>

<pre><code>#!/bin/bash

remote="$1"

if [ "$remote" != "gitlab" ] &amp;&amp; [ "$(git remote show | grep -c "gitlab")" = 1 ]; then
        git push gitlab master
fi
</code></pre>

<h2>Git и Planfix</h2>

<p>Никакой готовой интеграции между Git и Планфиксом нет, зато обе системы гибкие и позволяют лепить уникальные решения без больших усилий.</p>

<p>Git поддерживает хуки: скрипты, запускающиеся по определенным событиям.</p>

<p>У каждой задачи в Планфиксе есть свой email адрес, если послать на него письмо, оно придет в задачу в виде комментария, если с email отправителя связан пользователь, то письмо придет как будто от него.</p>

<p>Значит нам нужно отправлять email из Git в Планфикс на адрес задачи.</p>

<h1>Связываем все вместе</h1>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p>Чтобы подключить хук, надо положить скрипт в папку <code>.git/hooks/post-receive</code> и сделать его исполняемым, для этого надо выполнить в корне проекта:
<code>
curl -s "https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average" &gt; .git/hooks/post-receive
chmod +x .git/hooks/post-receive
</code></p>

<p>Так как у нас много проектов, я храню его в отдельной общей папке, а в каждом репозитории создаю символическую ссылку на него.</p>

<p>Хук получает список коммитов, пришедших с последним пушем, находит первую ссылку на задачу Планфикса и отправляет туда письмо.</p>

<h4>О письме</h4>

<ul>
<li><strong>Отправитель</strong>: email того, кто сделал коммит. По этой причине email в git config и email в профиле юзера Планфикса должны совпадать.</li>
<li><strong>Получатель</strong>: email задачи Планфикса</li>
<li><strong>Тема письма</strong>: <code>@commit @nonotify</code>, @nonotify для того, чтобы не уведомлять всех участников задачи о коммите, <code>@commit</code> ничего не значит, может быть потом пригодится для поиска таких комментов, хотя в отчетах текст комментария все равно использовать нельзя.</li>
<li><strong>Текст письма</strong>: текст коммита. Если репозиторий имеет зеркало на Gitlab, то в конец текста будет добавлена ссылка на коммит.</li>
</ul>


<p>Чтобы хук добавлял ссылку на Gitlab, не придумал ничего лучше, чем добавить remote <code>gitlab</code>:
<code>
git remote add gitlab ssh://git@org.ru:10022/sites/test.ru.git
</code></p>

<p>После этого хук будет извлекать из этого адреса URL <a href="http://org.ru/sites/test,">http://org.ru/sites/test,</a> который является главной страницей репозитория. Сайт при всем при этом не имеет доступа к Gitlab, поэтому push и pull в этот remote работать не будут.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Average: измерение среднего времени выполнения команды в Bash]]></title>
    <link href="http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash/"/>
    <updated>2016-02-29T03:46:56+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash</id>
    <content type="html"><![CDATA[<p>Периодически хочется посчитать среднее время, у меня были такие сценарии:</p>

<ul>
<li>простая проверка скорости загрузки страницы</li>
<li>подбор оптимальных параметров к команде</li>
<li>сравнение разных команд</li>
</ul>


<p>Раньше я просто запускал несколько раз с <code>time</code>, смотрел результат, у уме делил.
Но мне это надоело, поэтому написал скрипт <code>average</code>.</p>

<!-- more -->


<p>Код лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/average">https://github.com/popstas/server-scripts/blob/master/bin/average</a></p>

<p>Поставить можно так:
<code>
curl -s "https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average" &gt; /usr/local/bin/average
chmod +x /usr/local/bin/average
</code></p>

<p>Использовать можно так:</p>

<p>Запуск команды по умолчанию, 5 циклов:
<code>
average 'command'
</code></p>

<p>Запуск команды с указанным кол-вом циклов:
<code>
average 10 'command'
</code></p>

<p>Запуск команды с передачей кол-ва циклов через переменную окружения:
<code>
export CYCLES=5
average 'command'
</code></p>

<p>Чтобы не показывать вывод команды, можно обрезать его через tail:
<code>
average 'command' | tail -n1
</code></p>

<h3>Узнать среднее время загрузки страницы:</h3>

<p>С учетом кэша:
<code>
average 'curl -s "http://example.com/" &gt; /dev/null'
</code></p>

<p>В обход кэша:
<code>
average 'curl -s "http://example.com/?t=$RANDOM" &gt; /dev/null'
</code></p>

<hr />

<h3>Продвинутое использование</h3>

<p>Мне надо было узнать оптимальное количество параллельных процессов для запуска тестов,
теперь я могу узнать это запуском одной команды:
<code>
for p in {1..10}; do echo "$p" - $(average "vendor/bin/paratest -p $p" | tail -n1); done
</code>
Команда переберет кол-во процессов от 1 до 10, по каждой итерации выведет среднее время.</p>

<p>После запуска получил такие результаты:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for p in {1..10}; do echo &ldquo;$p&rdquo; - $(average &ldquo;vendor/bin/paratest -p $p&rdquo; | tail -n1); done&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1 - 1 loops, best of 5: 13.9 sec per loop
</span><span class='line'>2 - 1 loops, best of 5: 7.51 sec per loop
</span><span class='line'>3 - 1 loops, best of 5: 5.51 sec per loop
</span><span class='line'>4 - 1 loops, best of 5: 4.51 sec per loop
</span><span class='line'>5 - 1 loops, best of 5: 4.42 sec per loop
</span><span class='line'>6 - 1 loops, best of 5: 4.71 sec per loop
</span><span class='line'>7 - 1 loops, best of 5: 4.21 sec per loop
</span><span class='line'>8 - 1 loops, best of 5: 4.23 sec per loop
</span><span class='line'>9 - 1 loops, best of 5: 4.13 sec per loop
</span><span class='line'>10 - 1 loops, best of 5: 4.33 sec per loop</span></code></pre></td></tr></table></div></figure></p>

<p>Видно, что после 4 потоков разницы почти нет, а вот комп от запуска кучи параллельных процессов тормозит
очень даже заметно.</p>

<p>Конечно, в этом случае много ума не надо, чтобы понять, что кол-во процессов должно быть по кол-ву ядер, но я что-то засомневался :)</p>
]]></content>
  </entry>
  
</feed>
