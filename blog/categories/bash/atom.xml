<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2016-03-27T10:54:24+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Интеграция Git, Gitlab и Planfix почти как на Github]]></title>
    <link href="http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration/"/>
    <updated>2016-03-02T00:49:29+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration</id>
    <content type="html"><![CDATA[<p>Распробовал тут на неделе интеграцию задач Github и самого Git issue tracker.</p>

<p>Ниже будет написано, как настроить в <a href="https://planfix.ru/">Планфиксе</a> такое поведение:</p>

<ul>
<li>В коммите упоминаем задачу, например, <code>Правки футера шаблона, https://test.planfix.ru/task/123456</code></li>
<li>После push в удаленный репозиторий в упомянутой задаче появляется комментарий с текстом коммита и ссылкой на страницу коммита на Gitlab, если проект подключен к репозиторию.</li>
</ul>


<p>Tl;dr: настраивается post-receive hook в Git на удаленном сервере, после каждого пуша анализируются сообщения пришедших коммитов, коммиты, содержащие ссылки на задачи отправляются в задачи по email.</p>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p><img src="/images/2016-03/planfix_logo.png"></p>

<!-- more -->


<p>Здесь надо в 2 словах рассказать о нашем workflow:</p>

<ul>
<li>Компания занимается разработкой и поддержкой около 100 сайтов.</li>
<li>Каждый сайт использует Git, репозиторий лежит прямо в корне сайта, bare репозитории отсутствуют.</li>
<li>Часто бывают мелкие правки на разных сайтах.</li>
<li>90% сайтов на Drupal 7, в котором половина хранится в базе данных.</li>
<li>Во время правки контент-менеджер или клиент могут пользоваться сайтом и менять на нем данные</li>
<li>Разработчик выкачивает проект в PhpStorm, настаивает сохранение по Ctrl+S изменений на боевом сайте, таким образом получается, что когда приходит время пушить, на удаленном сервере фактически уже есть все изменения.</li>
<li>Разработчик также может напрямую править код сайта на удаленном сервере по SFTP, не выкачивая проект, после чего зайти по SSH на удаленный сервер и сделать коммит прямо оттуда.</li>
<li>Git по сути используется не для доставки изменений на боевой сайт, а для их доставки на компы разработчиков и ведения журнала изменений сайта.</li>
</ul>


<h2>Github issues</h2>

<p>Кто не знает про issues гитхаба, расскажу вкратце о его фишках:</p>

<ul>
<li>В задачах можно ссылаться на коммиты и другие задачи по номерам, они автоматически становятся ссылками.</li>
<li>В коммитах можно ссылаться на задачи так же: <code>#123</code>, такой коммит автоматом упоминается в задаче.</li>
<li>В PhpStorm можно смотреть список открытых issues и создавать из них задачи в IDE, что позволяет автоматом создавать чейнджлист, ветку для выполнения задачи, в коммите сразу будет ссылка на задачу (это все по желанию).</li>
<li>Можно закрывать задачу прямо из коммита, для этого достаточно упомянуть его рядом с одним из ключевых слов, например, <code>closes #123</code> после пуша в гитхаб закроет указанную задачу.</li>
</ul>


<p>А главное, что все связано и из любого места можно перейти на связанные действия.</p>

<p>Я уже краем уха слышал и видел обо всем этом и видел в чужих репозиториях, но вся картина нарисовалась только после использования. Да и к тому же на гитхабе до этого сталкивался только с pull-request'ами, там немного другое поведение.</p>

<h2>PhpStorm tasks</h2>

<p>В PhpStorm есть интеграция с менеджерами задач, Github там конечно есть, Планфикса там конечно нет, но зато если у менеджера задач есть API, можно интегрировать неподдерживаемый сервис. У Планфикса API есть, но из коробки он не подойдет для этой интеграции, нужно писать свои обертки. В общем-то это дает не много, всего лишь можно будет получать список задач по команде из шторма, и дописывать в коммит ссылку на задачу.</p>

<p>Кстати таски в шторме помогают и без интеграции с трекером: Ctrl+Shift+A - open task, автоматом чистятся все вкладки (создается контекст задачи), создается ветка в гите, changelist, по close task - коммит, я недавно начал пользоваться.</p>

<p>Но гораздо интереснее интеграция в другую сторону: ссылки из задач на коммиты.</p>

<p>Когда я разобрался с тем, как устроена интеграция задач в гитхабе, до меня быстро дошло: просто менеджер задач должен уметь парсить текст коммита, приходящий из гита и делать на основе этого какие-то действия. С этим тоже пока облом: в Планфиксе на данный момент нет обработки писем, прилетающих в задачи, зато <a href="https://planfix.ru/docs/%D0%9A%D0%B0%D0%BA_%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D1%83_%D0%BF%D0%BE_e-mail%3F">есть обработка писем</a>, приходящих на email юзера, что позволяет надеяться на появление обработки писем, приходящих на email задачи.</p>

<h2>Gitlab</h2>

<p>Самые активные проекты мы дублируем на наш внутренний Gitlab. Использование довольно извращенное, Gitlab сейчас никак не участвует в рабочем процессе, являясь просто зеркалом и веб-интерфейсом для просмотра коммитов.</p>

<p>На машине разработчика настраивается <code>pre-push</code> хук, который пушит также в Gitlab:</p>

<pre><code>#!/bin/bash

remote="$1"

if [ "$remote" != "gitlab" ] &amp;&amp; [ "$(git remote show | grep -c "gitlab")" = 1 ]; then
        git push gitlab master
fi
</code></pre>

<h2>Git и Planfix</h2>

<p>Никакой готовой интеграции между Git и Планфиксом нет, зато обе системы гибкие и позволяют лепить уникальные решения без больших усилий.</p>

<p>Git поддерживает хуки: скрипты, запускающиеся по определенным событиям.</p>

<p>У каждой задачи в Планфиксе есть свой email адрес, если послать на него письмо, оно придет в задачу в виде комментария, если с email отправителя связан пользователь, то письмо придет как будто от него.</p>

<p>Значит нам нужно отправлять email из Git в Планфикс на адрес задачи.</p>

<h1>Связываем все вместе</h1>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p>Чтобы подключить хук, надо положить скрипт в папку <code>.git/hooks/post-receive</code> и сделать его исполняемым, для этого надо выполнить в корне проекта:
<code>
curl -s "https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average" &gt; .git/hooks/post-receive
chmod +x .git/hooks/post-receive
</code></p>

<p>Так как у нас много проектов, я храню его в отдельной общей папке, а в каждом репозитории создаю символическую ссылку на него.</p>

<p>Хук получает список коммитов, пришедших с последним пушем, находит первую ссылку на задачу Планфикса и отправляет туда письмо.</p>

<h4>О письме</h4>

<ul>
<li><strong>Отправитель</strong>: email того, кто сделал коммит. По этой причине email в git config и email в профиле юзера Планфикса должны совпадать.</li>
<li><strong>Получатель</strong>: email задачи Планфикса</li>
<li><strong>Тема письма</strong>: <code>@commit @nonotify</code>, @nonotify для того, чтобы не уведомлять всех участников задачи о коммите, <code>@commit</code> ничего не значит, может быть потом пригодится для поиска таких комментов, хотя в отчетах текст комментария все равно использовать нельзя.</li>
<li><strong>Текст письма</strong>: текст коммита. Если репозиторий имеет зеркало на Gitlab, то в конец текста будет добавлена ссылка на коммит.</li>
</ul>


<p>Чтобы хук добавлял ссылку на Gitlab, не придумал ничего лучше, чем добавить remote <code>gitlab</code>:
<code>
git remote add gitlab ssh://git@org.ru:10022/sites/test.ru.git
</code></p>

<p>После этого хук будет извлекать из этого адреса URL <a href="http://org.ru/sites/test,">http://org.ru/sites/test,</a> который является главной страницей репозитория. Сайт при всем при этом не имеет доступа к Gitlab, поэтому push и pull в этот remote работать не будут.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Average: измерение среднего времени выполнения команды в Bash]]></title>
    <link href="http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash/"/>
    <updated>2016-02-29T03:46:56+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash</id>
    <content type="html"><![CDATA[<p>Периодически хочется посчитать среднее время, у меня были такие сценарии:</p>

<ul>
<li>простая проверка скорости загрузки страницы</li>
<li>подбор оптимальных параметров к команде</li>
<li>сравнение разных команд</li>
</ul>


<p>Раньше я просто запускал несколько раз с <code>time</code>, смотрел результат, у уме делил.
Но мне это надоело, поэтому написал скрипт <code>average</code>.</p>

<!-- more -->


<p>Код лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/average">https://github.com/popstas/server-scripts/blob/master/bin/average</a></p>

<p>Поставить можно так:
<code>
curl -s "https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average" &gt; /usr/local/bin/average
chmod +x /usr/local/bin/average
</code></p>

<p>Использовать можно так:</p>

<p>Запуск команды по умолчанию, 5 циклов:
<code>
average 'command'
</code></p>

<p>Запуск команды с указанным кол-вом циклов:
<code>
average 10 'command'
</code></p>

<p>Запуск команды с передачей кол-ва циклов через переменную окружения:
<code>
export CYCLES=5
average 'command'
</code></p>

<p>Чтобы не показывать вывод команды, можно обрезать его через tail:
<code>
average 'command' | tail -n1
</code></p>

<h3>Узнать среднее время загрузки страницы:</h3>

<p>С учетом кэша:
<code>
average 'curl -s "http://example.com/" &gt; /dev/null'
</code></p>

<p>В обход кэша:
<code>
average 'curl -s "http://example.com/?t=$RANDOM" &gt; /dev/null'
</code></p>

<hr />

<h3>Продвинутое использование</h3>

<p>Мне надо было узнать оптимальное количество параллельных процессов для запуска тестов,
теперь я могу узнать это запуском одной команды:
<code>
for p in {1..10}; do echo "$p" - $(average "vendor/bin/paratest -p $p" | tail -n1); done
</code>
Команда переберет кол-во процессов от 1 до 10, по каждой итерации выведет среднее время.</p>

<p>После запуска получил такие результаты:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for p in {1..10}; do echo &ldquo;$p&rdquo; - $(average &ldquo;vendor/bin/paratest -p $p&rdquo; | tail -n1); done&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1 - 1 loops, best of 5: 13.9 sec per loop
</span><span class='line'>2 - 1 loops, best of 5: 7.51 sec per loop
</span><span class='line'>3 - 1 loops, best of 5: 5.51 sec per loop
</span><span class='line'>4 - 1 loops, best of 5: 4.51 sec per loop
</span><span class='line'>5 - 1 loops, best of 5: 4.42 sec per loop
</span><span class='line'>6 - 1 loops, best of 5: 4.71 sec per loop
</span><span class='line'>7 - 1 loops, best of 5: 4.21 sec per loop
</span><span class='line'>8 - 1 loops, best of 5: 4.23 sec per loop
</span><span class='line'>9 - 1 loops, best of 5: 4.13 sec per loop
</span><span class='line'>10 - 1 loops, best of 5: 4.33 sec per loop</span></code></pre></td></tr></table></div></figure></p>

<p>Видно, что после 4 потоков разницы почти нет, а вот комп от запуска кучи параллельных процессов тормозит
очень даже заметно.</p>

<p>Конечно, в этом случае много ума не надо, чтобы понять, что кол-во процессов должно быть по кол-ву ядер, но я что-то засомневался :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Проверяем изменения на странице через Cron]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/31/check-webpage-changes-with-cron/"/>
    <updated>2016-01-31T02:00:13+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/31/check-webpage-changes-with-cron</id>
    <content type="html"><![CDATA[<p>Сегодня хотел заказать ароматизаторов на <a href="http://baker-flavors.blogspot.ru/">Baker Flavours</a>, дошел до страницы заказа,
и увидел &ldquo;Уважаемые заказчики! В связи с чрезвычайно большим количеством заказов, прием заказов временно прекращен.&rdquo;.</p>

<p>Ок, будем ждать, пока эта надпись не пропадет, а чтобы не проверять руками, будем делать это на автомате и ждать уведомления.</p>

<p>Строчка для crontab:
<code>
0 20 * * * curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep "временно прекращен" &gt; /dev/null || { echo "BF order started" | terminal-notifier &amp;&amp; open http://bakerflavors.ru/formbf.htm }
</code></p>

<p>Подробности под катом.</p>

<!-- more -->


<p>Нужно сделать так, чтобы я узнал о том, что этот текст со страницы пропадет.</p>

<p>Получаем содержимое страницы:
<code>
curl -s http://bakerflavors.ru/formbf.htm
</code></p>

<p>Оказалось, что страница в windows-1251 кодировке и выдает <code>�</code>. Конвертируем:
<code>
curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8
</code></p>

<p>Проверяем наличие текста:
<code>
curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep "временно прекращен" &gt; /dev/null
</code></p>

<p>Когда текст пропадет, grep выдаст ненулевой exitcode. Добавляем действие на этот случай.</p>

<p>В начале я сделал как обычно делаю на сервере: отправил письмо через команду <code>mail</code>. Оказалось, что письмо уходит в спам.
Не стал с этим разбираться, вместо этого буду показывать notification. Уведомление сделал через
<a href="https://github.com/julienXX/terminal-notifier">julienXX/terminal-notifier</a> (Mac OS),
но тут опять вышел облом: уведомление нельзя показывать бесконечно, если я окажусь в это время не перед экраном,
я об этом не узнаю. Поэтому буду еще и открывать страницу заказа в браузере. В итоге получилось вот это:
<code>
curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep "временно прекращен" &gt; /dev/null || { \
  echo "BF order started" | terminal-notifier &amp;&amp; \
  open http://bakerflavors.ru/formbf.htm \
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Быстрое обновление PhpStorm EAP на Mac OS через Bash]]></title>
    <link href="http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os/"/>
    <updated>2016-01-17T07:50:17+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os</id>
    <content type="html"><![CDATA[<p>Надоело постоянно обновлять PhpStorm руками. На Ubuntu последнее время делал это с помощью ansible,
под Mac этот плейбук не расчитан, к тому же версию ему надо было указвать вручную.
Поэтому написал скрипт, не совместимый с Ubuntu :)</p>

<p><img class="<a" src="href="http://blog.jetbrains.com/phpstorm/files/2016/01/PhpStorm11EAP_splash_2@2x.png">http://blog.jetbrains.com/phpstorm/files/2016/01/PhpStorm11EAP_splash_2@2x.png</a>"></p>

<!-- more -->


<p>Что он делает:</p>

<ul>
<li>идет на страницу EAP, находит там версию</li>
<li>проверяет, что на компе стоит другая версия EAP</li>
<li>качает dmg в папку Загрузки</li>
<li>монтирует образ</li>
<li>завершает PhpStorm, если он открыт</li>
<li>удаляет текущую версию и копирует новую в папку /Applications</li>
<li>запускает новую версию</li>
</ul>


<p>Поставить можно так:
<code>
curl -s "https://gist.githubusercontent.com/popstas/613a72a34576b85caec4/raw/644f457ed0187ab0d1207576e925c06260451131/phpstorm-eap-update.sh" &gt; /usr/local/bin/phpstorm-eap-update
chmod +x /usr/local/bin/phpstorm-eap-update
</code></p>

<p>После чего можно обновлять просто запуском <code>phpstorm-eap-update</code>.
По идее можно даже в cron его засунуть, чтобы совсем автомат, но я и так узнаю о новой версии из rss.</p>

<p>Код лежит здесь - <a href="https://gist.github.com/popstas/613a72a34576b85caec4">https://gist.github.com/popstas/613a72a34576b85caec4</a></p>

<p>В PhpStorm 11 из фич ничего особенного не нашел, зато с этой версии он перешел на использование Java 8,
не знаю, в этом ли дело, но у меня он вроде перестал тормозить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интерактивная Zsh History с поиском и скроллом, Percol]]></title>
    <link href="http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/"/>
    <updated>2015-12-10T19:55:20+05:00</updated>
    <id>http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search</id>
    <content type="html"><![CDATA[<p>Если кто не знает, в bash/zsh есть поиск по истории комманд, если нажать <code>Ctrl+R</code> и начать набирать
команду, отобразится последняя команда из истории, для навигации можно использовать
<code>Ctrl+R</code>, <code>Ctrl+Shift+R</code>. При этом видно одновременно видно только одну команду из истории.</p>

<p>Утилита <a href="https://github.com/mooz/percol#zsh-history-search">percol</a> решает эту проблему.</p>

<p><img src="/images/2015-12/percol.gif"></p>

<!-- more -->


<p>Собственно по ссылке выше готовый конфиг для zsh. Я немного изменил его под себя,
чтобы использовать percol не только для поиска по истории:</p>

<pre><code class="bash zsh-percol https://github.com/popstas/zsh-config/blob/master/.zshrc">function exists { which $1 &amp;&gt; /dev/null }
if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac &amp;&amp; tac="gtac" || { exists tac &amp;&amp; tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history

    # percol based grep
    g() { percol --match-method regex --query="$*"; }
fi
</code></pre>

<p>Код я добавил в <a href="https://github.com/popstas/zsh-config">свой .zshrc</a>. Если <a href="https://github.com/robbyrussell/oh-my-zsh/pull/4582">этот пулл реквест</a> примут, то данный код появится в составе
<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> в виде плагина <code>percol</code>.</p>

<p>Код полностью взят со страницы percol, от себя добавил функцию g(), она кстати конфиликтует с плагином git для oh-my-zsh,
зато теперь я могу писать что-то вроде:
<code>bash
find . -type file | g
</code>
для интерактивного выбора результатов поиска и просто для замены grep. При этом доступен мультивыбор по <code>Ctrl+Space</code>.</p>

<p>Пример посложнее:
<code>
vim $(find -name "*.markdown" | g)
</code>
После запуска откроется список всех <code>.markdown</code> файлов в текущей и вложенных папках, выбранный файл сразу откроется в Vim.
Это как будто у вас появилась возможность приделывать midnight commander к результатам поиска!</p>

<p>Смотрите больше интересных примеров <a href="https://github.com/mooz/percol">на странице проекта</a>.</p>

<p>Надо сказать, что на github есть программы с таким же функционалом, как у percol, я об этом узнал на странице самого percol.
Там есть peco, клон percol на Go (а значит поставляется в виде одного бинарника). Мне проще через pip установить percol, так
что с аналогами не сравнивал.</p>
]]></content>
  </entry>
  
</feed>
