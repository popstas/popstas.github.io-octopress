<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ansible | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2017-02-24T18:46:46+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Как я создал и отказался от локального репозитория Apt-mirror для Ubuntu для ускорения тестирования Ansible ролей]]></title>
    <link href="http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/"/>
    <updated>2017-02-24T17:39:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker</id>
    <content type="html"><![CDATA[<p>При тестировании плейбуков на чистой Ubuntu (а как же еще?) самые большие накладные расходы по времени (субъективно)
и уж точно самые большие по трафику уходят на установку пакетов из системного репозитория. Особенно это заметно, когда видишь, что один и тот же тест Travis CI прогоняет в 1.5 раза быстрее.</p>

<p>Ниже описано, как создать зеркало из <a href="http://mirror.yandex.ru/ubuntu">http://mirror.yandex.ru/ubuntu</a> и подружить его с Gitlab CI и molecule.</p>

<p>TLDR: не делайте локальный репозиторий через <code>apt-mirror</code> для мелких задач, не стоит оно того. Вместо этого нужно поднять кеширующий сервер через <code>apt-cacher</code>.</p>

<p><img src="http://blog.popstas.ru/images/2017-02/apt-mirror.png" /></p>

<!-- more -->


<h2>Настройка apt-mirror</h2>

<p>Для синхронизации локального репозитория с основным вариант один - <code>apt-mirror</code>.
<a href="https://apt-mirror.github.io">Официальный сайт</a> считает нас умными, поэтому все его инструкции заключаются в 3 строчках:
<code>bash
apt-get install apt-mirror
nano /etc/apt/mirror.list
sudo apt-mirror
</code></p>

<p>Все действительно почти так просто. Почти.</p>

<h3>Выбор самого быстрого репозитория</h3>

<p>Пока гуглил тему, случайно наткнулся на <a href="https://hub.docker.com/r/evgeniyklemin/ubuntu-fastest-apt-mirror/">инструкцию</a>, как выбрать самый быстрый репозиторий.
Скорее всего, для нас для всех это будет <a href="http://mirror.yandex.ru/ubuntu,">http://mirror.yandex.ru/ubuntu,</a> но можно в этом убедиться:</p>

<pre><code class="bash">wget -q -nv -O- http://ftp.ru.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-26_amd64.deb &gt; /tmp/netselect_0.3.ds1-26_amd64.deb
dpkg -i /tmp/netselect_0.3.ds1-26_amd64.deb
netselect -s3 -t20 `wget -q -nv -O- https://launchpad.net/ubuntu/+archivemirrors | grep -P -B8 "statusUP|statusSIX" | grep -o -P "(f|ht)tp.*\"" | tr '"\n' '  '`
</code></pre>

<p>Пакета нет в репозитории Ubuntu, поэтому качаем из репозитория Debian
В результате вы получите список из 3 самых быстрых (по пингу) репозиториев:</p>

<pre><code>54 http://mirror.yandex.ru/ubuntu/
89 http://ubuntu.volia.net/ubuntu-archive/
124 http://nl.archive.ubuntu.com/ubuntu/
</code></pre>

<h3>Конфигурация</h3>

<p>Открываем <code>/etc/apt/mirror.list</code>.</p>

<ul>
<li>Меняем <code>archive.ubuntu.com</code> на <code>mirror.yandex.ru</code>.</li>
<li>Убираем <code>multiverse</code> репозиторий (в стандартном Docker контейнере <code>ubuntu</code> его нет, видимо не очень нужен, зато экономим сразу 13 Гб).</li>
<li>Меняем путь хранения зеркала, не забывая после этого скопировать пустой скрипт в новое место <code>/var/spool/apt-mirror/var/postmirror.sh</code>, иначе <code>apt-mirror</code> будет в конце падать с ошибкой. У меня зеркало будет храниться в <code>/var/backups/apt-mirror</code> (на диске с бекапами места много)</li>
</ul>


<p>Это же в виде команд:
<code>bash
sed -i /etc/apt/mirror.list 's/archive.ubuntu.com/mirror.yandex.ru/g'
sed -i /etc/apt/mirror.list 's/ multiverse//g'
sed -i /etc/apt/mirror.list 's/\/var\/spool\/apt-mirror/\var\/backups\/apt-mirror/g'
mkdir -p /var/backups/apt-mirror/var
cp /var/spool/apt-mirror/var/postmirror.sh /var/backups/apt-mirror/var
</code></p>

<p>Добавляем в cron задание по обновлению репозитория, я буду запускать в 1 ночи:
<code>bash
sed -i 's/#0 4/0 1/g' /etc/cron.d/apt-mirror
</code></p>

<p>Настраиваем nginx на отдачу репозитория, у меня конфиг такой:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen 80<span class="p">;</span>
</span><span class='line'>  server_name mirror.myserver.ru<span class="p">;</span>
</span><span class='line'>  root /var/backups/apt-mirror/mirror/mirror.yandex.ru<span class="p">;</span>
</span><span class='line'>  access_log off<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  location / <span class="o">{</span>
</span><span class='line'>    autoindex on<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Все готово, осталось запустить <code>apt-mirror</code> и подождать денек: у меня выкачивалось 142 Гб.
Причем обновления тоже будут весить ощутимо, как я понял: через день я запустил apt-mirror еще раз,
он скачал 1.5 Гб.</p>

<p>Проверяем URL <a href="http://mirror.myserver.ru/,">http://mirror.myserver.ru/,</a> там должен быть доступен каталог <code>ubuntu</code>.</p>

<p>После этого можете сменить системные репозитории в ваших локальных убунтах и наслаждаться скоростью.</p>

<h3>Ошибка при apt-get update: binary-i386/Packages: 404  Not Found</h3>

<p>Хотя нет, насладиться сразу конечно не получилось. По какой-то причине (наверное причина в месте на диске), apt-mirror выкачивает только amd64 пакеты, из-за чего <code>apt-get update</code> ругается:
<code>
W: The repository 'http://apt.myserver.ru/ubuntu xenial-backports Release' does not have a Release file.
W: Failed to fetch http://apt.myserver.ru/ubuntu/dists/xenial/main/binary-i386/Packages: 404  Not Found
W: Failed to fetch http://apt.myserver.ru/ubuntu/dists/xenial-updates/main/binary-i386/Packages: 404  Not Found
E: Some index files failed to download. They have been ignored, or old ones used instead.
</code></p>

<p>Казалось бы ничего страшного, но уверен, что в тестах ненулевой код выхода apt-get будет все останавливать, поэтому придется чинить.</p>

<p>Ошибка есть на <a href="https://askubuntu.com/questions/465303/apt-mirror-error/574141">askubuntu.com</a>, спасибо человеку, который предложил решение и негодовал по поводу того, что есть только в <code>man sources.list</code>.</p>

<p>Решение напрашивается: явно указывать в <code>sources.list</code>, что в репозитории только amd64 пакеты, то есть вместо:
<code>
deb [ arch=amd64 ] http://apt.myserver.ru/ubuntu/ xenial main restricted universe
</code></p>

<p>С настройкой <code>apt-mirror</code> закончили, перейдем к использованию в тестах.</p>

<hr />

<h2>Переключение Docker контейнера на локальный apt репозиторий</h2>

<p><a href="https://github.com/ekino/docker-images/tree/master/apt-mirror">https://github.com/ekino/docker-images/tree/master/apt-mirror</a> - здесь приведено 2 способа настройки репозитория в контейнере, не изменяя его:</p>

<ol>
<li>[Плохой способ] Подмена через DNS</li>
<li>[Хороший способ] Подмена <code>/etc/apt/sources.list</code></li>
</ol>


<p>Я выбрал хороший. Делается это монтированием файла на место <code>/etc/apt/sources.list</code>:</p>

<pre><code class="bash">FQDN="apt.myserver.ru"
cat &lt;&lt;EOF &gt; sources.list-$FQDN
deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial main restricted universe
deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial-updates main restricted universe
deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial-security main restricted universe
EOF
</code></pre>

<p>Чтобы не тащить с собой артефакты, файл создается командой.</p>

<p>После этого проверяем, это должно отработать нормально:
<code>bash
docker run --rm -it -v $(readlink -f sources.list-$FQDN):/etc/apt/sources.list ubuntu:16.04 apt-get update
</code></p>

<p>Если <code>readlink</code> выдает ошибку <code>readlink: illegal option -- f</code>, тогда вы скорее всего сидите на MacOS и вам нужно сделать <code>brew install coreutils</code> и прописать в переменную <code>PATH</code> то, что он просит.</p>

<h2>Сравнение скорости</h2>

<p>Я потратил около 4 часов на то, чтобы настроить локальные репозитории, посмотрим, сколько я сэкономил времени.
Скорость инета у меня 30 мбит.</p>

<p>Я сравнил отработку <code>time molecule test</code> на 3 ansible ролях, вот результаты:</p>

<table>
<thead>
<tr>
<th>Роль                </th>
<th> Стандартный репозиторий </th>
<th> Локальный репозиторий </th>
<th> Travis CI:</th>
</tr>
</thead>
<tbody>
<tr>
<td>ansible-role-common </td>
<td> 9:24                    </td>
<td> 6:51                  </td>
<td> <strong>4:32</strong></td>
</tr>
<tr>
<td>ansible-role-mysql  </td>
<td> 4:02                    </td>
<td> <strong>3:40</strong>              </td>
<td> 3:46</td>
</tr>
<tr>
<td>ansible-role-zsh    </td>
<td> 4:39                    </td>
<td> <strong>3:02</strong>              </td>
<td> 4:08</td>
</tr>
</tbody>
</table>


<hr />

<p>Как видно, прирост небольшой, всего 20-30%.</p>

<p>Тут надо заметить, что в <code>test</code> входит проверка идемпотентности, где никакие пакеты не ставятся. Тогда я сравнил время выполнения &lsquo;molecule converge&rsquo; для <code>ansible-role-mysql</code> и получил немного лучшие результаты: 2:30 против 3:17, это уже почти в 2 раза быстрее.</p>

<table>
<thead>
<tr>
<th>Роль                </th>
<th> Стандартный репозиторий </th>
<th> Локальный репозиторий</th>
</tr>
</thead>
<tbody>
<tr>
<td>ansible-role-common </td>
<td> 8:15                    </td>
<td> 6:09</td>
</tr>
<tr>
<td>ansible-role-mysql  </td>
<td> 3:17                    </td>
<td> 2:30</td>
</tr>
<tr>
<td>ansible-role-zsh    </td>
<td> 4:05                    </td>
<td> 2:43</td>
</tr>
</tbody>
</table>


<h2>Выводы по поводу apt-mirror</h2>

<p>Результаты меня немного расстроили. Оказалось, что поразительного прироста в скорости, на который я надеялся, не будет.</p>

<h3>Плюсы:</h3>

<ul>
<li>один раз потратил время, чтобы при каждом тесте ждать меньше</li>
<li>уменьшает желание тестировать не на чистой машине</li>
<li>интернет-канал не занимается в рабочее время</li>
</ul>


<h3>Минусы</h3>

<ul>
<li>эффект слабый, 20-30%</li>
<li>сложности с пробросом файла <code>sources.list</code></li>
<li>уход от стандартной конфигурации Gitlab CI</li>
<li>разные конфиги для Travis CI и Gitlab CI</li>
</ul>


<p>На основе этого сделал для себя вывод: это подходит только для локального постоянного применения, в остальных случаях минусы перевешивают.</p>

<h2>Что-то тут не так&hellip;</h2>

<p>После этого я задумался: а как делают &ldquo;большие&rdquo;? Из серьезных решений для локальных репозиториев я знаю только Artifactory. Пошел посмотреть, как у них обстоят дела с зеркалами и <a href="https://www.jfrog.com/knowledge-base/how-to-mirror-a-remote-repository/">нашел</a>: они умеют быть зеркалом, но не рекоменуют их так использовать, т.к. это неэффективно. Вместо этого они предлагают пользоваться ими как кеширующим сервером. Такие дела&hellip; Надо смотреть в сторону <a href="https://help.ubuntu.com/community/Apt-Cacher-Server">apt-cacher</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Извлечение одной из папок в Git репозитории в отдельный репозиторий с сохранением истории - Git-extract-subproject]]></title>
    <link href="http://blog.popstas.ru/blog/2017/02/22/git-extract-subproject-preserving-history/"/>
    <updated>2017-02-22T01:19:00+05:00</updated>
    <id>http://blog.popstas.ru/blog/2017/02/22/git-extract-subproject-preserving-history</id>
    <content type="html"><![CDATA[<p>Занялся я тут распиливанием большого проекта (дерево ansible ролей) на отдельные репозитории.</p>

<h3>Для этого надо:</h3>

<ol>
<li>Извлечь директорию подпроекта в отдельный репозиторий</li>
<li>Удалить из проекта папку подпроекта</li>
<li>Добавить в большой проект зависимость от подпроекта</li>
</ol>


<p>Ниже написано, как сделать 1-й шаг одной командой через скрипт <code>git-extract-subproject</code>.</p>

<p><img src="http://blog.popstas.ru/images/2017-02/git-extract-subproject.jpg" /></p>

<!-- more -->


<p>В общем все оказалось просто, за минуту находится статья об этом - <a href="http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/">
Moving Files from one Git Repository to Another, Preserving History</a>, за 10 минут становится понятно, что как работает.</p>

<p>Мне нужно было проделать эту операцию 10+ раз, поэтому написал скрипт, извлекающий репозиторий одной командой.</p>

<h2>Алгоритм извлечения:</h2>

<ol>
<li>Клонировать большой проект во временный репозиторий</li>
<li>Удалить из него все, кроме папки модуля через git-фильтр. При этом переписывается история</li>
<li>Создать чистый репозиторий для нового модуля</li>
<li>Добавить в чистый репозиторий временный, как remote source</li>
<li>Сделать pull из remote source в master</li>
<li>Подчистить следы</li>
</ol>


<p>По идее уже после п.2 временный репозиторий выглядит как готовый модуль, пп.3-6 нужны для того, чтобы не тащить следы истории и настроек родительского проекта в дочерний.</p>

<p>Например, у меня есть репозиторий <code>ansible-server</code>, в нем лежит роль <code>roles/server-scripts</code>. Тогда нужно перейти в папку ansible-server и запустить:</p>

<pre><code>git-extract-subproject roles/server-scripts ansible-role-server-scripts
</code></pre>

<p>После этого рядом с <code>ansible-server</code> создастся готовый проект <code>ansible-role-server-scripts</code>. Остается добавить в него remote origin куда следует и запушить.</p>

<p>В итоге получился репозиторий с историей - <a href="https://github.com/viasite-ansible/ansible-role-server-scripts/commits/master">viasite-ansible/ansible-role-server-scripts</a>.</p>

<p>Код скрипта здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-extract-subproject">popstas/server-scripts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kapacitor: часть 1. Введение, сравнение с Monit, установка с Ansible и без, настройка]]></title>
    <link href="http://blog.popstas.ru/blog/2016/05/19/kapacitor-ansible-install-monit-comparsion/"/>
    <updated>2016-05-19T00:47:52+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/05/19/kapacitor-ansible-install-monit-comparsion</id>
    <content type="html"><![CDATA[<p>Несколько недель назад я начал разбираться с Kapacitor, попутно записывая свои действия. Конца разбирательствам было не видно, записей становилось все больше и накопилось на серию.</p>

<p>Речь пойдет о Kapacitor, последнеем слое из стека <a href="https://influxdata.com/get-started/what-is-the-tick-stack/">TICK</a> от InfluxData, набора программ для сбора, отображения и обработке метрик.</p>

<p>Tl;dr: думаю, что Kapacitor нужен только тем, кто уже использует InfluxDB для сбора метрик. С установкой могут быть проблемы, если руки кривые.</p>

<p>А также небольшое замечание о том, <a href="/blog/2016/05/19/kapacitor-ansible-install-monit-comparsion/#github-pull-request">как делать Pull request'ы из браузера за 2 минуты</a></p>

<p><img style="background:#1F242D" src="http://blog.popstas.ru/images/2016-05/kapacitor.svg" /></p>

<!-- more -->


<p>Я уже настроил три слоя из стека: на серверах стоят агенты Telegraf, передают метрики в InfluxDB, их можно смотреть в виде графиков через Grafana (InfluxData предлагает свой Chronograf, но он сильно отстает от Grafana по функционалу на январь 2016 и вряд ли это изменится).</p>

<p>У этой схемы есть недостаток: чтобы узнать, что что-то идет не так, нужно зайти в Grafana и глазами найти это что-то. Это меня устраивает, когда я уже знаю, что сервер плохо себя чувствует.</p>

<p>Kapacitor нужен для уведомлений, алертинга. В 2 словах: это демон, который умеет пропускать через себя данные, приходящие в InfluxDB, обрабатывать их и пересылать по разным каналам связи / на HTTP / в базу данных.</p>

<p>Для меня Kapacitor - прямой конкурент Monit, поэтому сравниваю с ним, больше ни с чем подобным дел не имел, но слышал, что для мониторинга серверов правильные пацаны используют Zabbix, Nagios/Icinga, Sensu, Riemann. Я решил пока не добавлять софта на сервера, да и уведомлять на основе уже собранных данных мне кажется правильным, этим объясняется мой выбор в пользу Kapacitor.</p>

<h3>Плюсы Kapacitor</h3>

<ol>
<li>Убирание лишнего. Kapacitor не надо ставить агентом, роль агента выполняет Telegraf. Monit, которым я пользуюсь сейчас для алертинга, дублирует функционал, собирая метрики самостоятельно.</li>
<li>Надежный алертинг. У monit тут есть проблема: когда умирает сервер, monit, установленный там, тоже умирает и не успевает отправить алерт на email. Надежный, кроме случаев, когда падает Kapacitor или InfluxDB, что случается.</li>
<li>Продвинутый алертинг. Monit умеет мало (ладно, много, но я умею на нем мало). Kapacitor имеет в распоряжении данные всех моих серверов, что позволяет ему смотреть на них как на систему. У меня в этом месте фантазия начинает играть, не буду расписывать, что по моему мнению можно отслеживать через Kapacitor, так как может такого и нельзя :)</li>
<li>Каналы алертинга. Заявлена поддержка HipChat, OpsGenie, Alerta, Sensu, PagerDuty, Slack, VictorOps, кроме этого есть запись в лог, email, POST-запрос. Для разных событий можно указывать разные каналы. Monit умеет только email, а мне нужен был Slack.</li>
</ol>


<h3>Плюсы Monit:</h3>

<ol>
<li>Monit проверенный, а Kapacitor - нет, как и весь TICK.</li>
<li>Monit имеет прямой доступ к серверу, что позволяет ему реагировать самостоятельно, например, перезагружать сервис, если он не отвечает. Kapacitor умеет только уведомлять.</li>
</ol>


<h2>Установка</h2>

<p>Ставить можно <a href="https://influxdata.com/downloads/#kapacitor">по-разному</a>.</p>

<p>Для тех, кто не дружит с Ansible, установка из репозитория, <a href="https://docs.influxdata.com/influxdb/v0.13/introduction/installation/">взятая из мануала</a> по InfluxDB (репозиторий один на весь стек InfluxData):</p>

<pre><code class="sh">curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -
source /etc/lsb-release
echo "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/influxdb.list
aptitude update
aptitude install kapacitor
</code></pre>

<p>Я буду ставить через Ansible <a href="https://github.com/rossmcdonald/kapacitor">rossmcdonald/kapacitor</a></p>

<pre><code class="sh">ansible-galaxy install rossmcdonald.kapacitor
ansible-playbook -c local kapacitor.yml
</code></pre>

<h4><a name="github-pull-request"></a>Как просто делать Pull request</h4>

<p>В плейбуке была ошибка, я бы об этом не упоминал, если бы не узнал недавно, как просто <a href="https://github.com/rossmcdonald/kapacitor/pull/1">делать pull request</a> прямо в браузере. Это заняло минуты две: жмем &ldquo;редактировать&rdquo; на интересующем файле, правим, ниже пишем сообщение к коммиту, сохраняем. Это автоматом создаст форк, отдельную ветку и сделает туда коммит. На следующей странице останется нажать &ldquo;Create pull request&rdquo;.</p>

<h2>Настройка</h2>

<p>Так как я уже использовал готовую ansible-роль, настройка уже включена в установку. Я взял <a href="https://github.com/rossmcdonald/kapacitor/blob/master/test.yml">тестовый плейбук</a> роли и изменил его: добавил данные авторизации в InfluxDB, SMTP, Slack. Опция <code>global</code> в настройках канала для уведомлений означает, что он будет использоваться по умолчанию в скриптах, иначе его нужно указывать явно.</p>

<p>Для установки сделал такой плейбук:</p>

<pre><code class="yaml kapacitor.yml">- hosts: all
  roles:
    - role: rossmcdonald.kapacitor
  vars:
    # [influxdb]
    kapacitor_influxdb_enabled: "true"
    kapacitor_influxdb_urls:
      - http://localhost:8086
    kapacitor_influxdb_username: user
    kapacitor_influxdb_password: pass

    # [smtp]
    kapacitor_smtp_enabled: "true"
    kapacitor_smtp_host: smtp.yandex.ru
    kapacitor_smtp_port: 587
    kapacitor_smtp_username: example@yandex.ru
    kapacitor_smtp_password: pass
    kapacitor_smtp_from: example@yandex.ru
    kapacitor_smtp_to:
      - "admin@example.com"

    # [slack]
    kapacitor_slack_enabled: "true"
    kapacitor_slack_url:  https://hooks.slack.com/services/G2JFW7VFQ/B13UHEN5X/9J6IVIcUw9FGCeF7hfjFNGBn # url ненастоящий
    kapacitor_slack_channel: "#servers"
    kapacitor_slack_global: "true"

    kapacitor_tasks_to_enable:
</code></pre>

<h2>Проверка</h2>

<p>Лучший способ проверить, что Kapacitor видит данные из InfluxDB - записать фрагмент:</p>

<pre><code class="sh">kapacitor record stream -name la_alert -duration 5s
</code></pre>

<p>Если запись пошла, можно приступать к самому интересному: созданию алертов.</p>

<p>Если через 5 секунд команда не завершилась, значит что-то пошло не так.
Смотрим логи:</p>

<ul>
<li>Kapacitor может говорить об ошибках к подключению к InfluxDB</li>
<li>InfluxDB может сыпать <code>connection refused</code> ошибками</li>
</ul>


<p>В моем случае домен, который я прописал в конфиге Kapacitor, был прописан в /etc/hosts на 127.0.1.1, Kapacitor слушал этот порт, соответственно, InfluxDB не мог достучаться из Docker-контейнера.</p>

<h4>Проблема из-за Docker</h4>

<p>У меня в логах была ошибка:</p>

<pre><code>open server: open service *influxdb.Service: subscription already exists
</code></pre>

<p>Я указал другой локальный хост, localhost, т.к. я не предполагаю, что к kapacitor будет обращаться кто-то, кроме InfluxDB, который стоит на той же машине. Это не помогло. Я не понял, в чем ошибка, nmap показывает свободный порт. Оставил стандартный, поддомен машины, это почему-то сработало.</p>

<p>Оказалось, проблема была в том, что InfluxDB при первом запуске Kapacitor'а создал на него подписки (subscriptions), которые означают то, что InfluxDB будет пересылать в Kapacitor все, что приходит в него.</p>

<p>InfluxDB у меня крутится в Docker'е с проброшенными портами, а Kapacitor - нет, то есть они технически были не на одной машине. Точнее, для Kapacitor'а казалось, что InfluxDB на этой же машине, но для Influx'a он на другой машине! Оказалось, что изнутри докера внутренний адрес, на который создались подписки, вел не туда, поэтому данные не доходили до Kapacitor, чтобы исправить это, понадобилось удалить подписки, узнав их имена:</p>

<pre><code class="sql">SHOW SUBSCRIPTIONS
DROP SUBSCRIPTION "kapacitor-42d050d7-5e60-462f-b079-3f8157ec2eff" ON "telegraf"."default"
DROP SUBSCRIPTION "kapacitor-42d050d7-5e60-462f-b079-3f8157ec2eff" ON "_internal"."monitor"
</code></pre>

<h2>Выводы</h2>

<ol>
<li>Использование Docker для InfluxDB сильно усложнило мне процесс установки при том, что ничего мне не дало: InfluxDB - это один бинарник, если у вас вся инфраструктура живет не в контейнерах, используйте установку из репозиториев, это проще. С другой стороны откатиться на предыдущую версию будет сложнее&hellip;</li>
<li>Kapacitor сильно превосходит Monit по возможностям алертинга, но уступает ему в контроле над ситуацией. Хотя можно себе представить сценарий, что Kapacitor отправляет POST-запрос с инструкциями к действиям сервису, который делает что-то, но меня такой самопальный RPC пугает.</li>
<li>Все это достаточно сырое в том смысле, что нет достаточной обвязки (оф. <a href="https://hub.docker.com/r/library/influxdb/">контейнер для InfluxDB</a> появился только 16 мая, самый популярный плейбук для Kapacitor понадобилось править, чтобы установить), информации очень мало, кроме GitHub issues и документации на данный момент нет ничего. Поэтому появляющиеся проблемы решать будет сложнее.</li>
</ol>


<h2>Ссылки</h2>

<ul>
<li><a href="https://influxdata.com/time-series-platform/kapacitor/">страница Kapacitor</a></li>
<li><a href="https://influxdata.com/get-started/configuring-alerts-with-kapacitor/">оф. туториал</a></li>
<li><a href="https://docs.influxdata.com/kapacitor/v0.12/">docs</a></li>
<li><a href="https://github.com/influxdata/kapacitor">influxdata/kapacitor</a></li>
<li><a href="https://github.com/influxdata/kapacitor-docker">influxdata/kapacitor-docker</a></li>
<li><a href="https://github.com/rossmcdonald/kapacitor">ansible-role-kapacitor</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
