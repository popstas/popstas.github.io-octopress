<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Github | Popstas]]></title>
  <link href="http://blog.popstas.ru/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://blog.popstas.ru/"/>
  <updated>2017-02-24T18:46:46+05:00</updated>
  <id>http://blog.popstas.ru/</id>
  <author>
    <name><![CDATA[Stanislav Popov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kapacitor: часть 1. Введение, сравнение с Monit, установка с Ansible и без, настройка]]></title>
    <link href="http://blog.popstas.ru/blog/2016/05/19/kapacitor-ansible-install-monit-comparsion/"/>
    <updated>2016-05-19T00:47:52+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/05/19/kapacitor-ansible-install-monit-comparsion</id>
    <content type="html"><![CDATA[<p>Несколько недель назад я начал разбираться с Kapacitor, попутно записывая свои действия. Конца разбирательствам было не видно, записей становилось все больше и накопилось на серию.</p>

<p>Речь пойдет о Kapacitor, последнеем слое из стека <a href="https://influxdata.com/get-started/what-is-the-tick-stack/">TICK</a> от InfluxData, набора программ для сбора, отображения и обработке метрик.</p>

<p>Tl;dr: думаю, что Kapacitor нужен только тем, кто уже использует InfluxDB для сбора метрик. С установкой могут быть проблемы, если руки кривые.</p>

<p>А также небольшое замечание о том, <a href="/blog/2016/05/19/kapacitor-ansible-install-monit-comparsion/#github-pull-request">как делать Pull request'ы из браузера за 2 минуты</a></p>

<p><img style="background:#1F242D" src="http://blog.popstas.ru/images/2016-05/kapacitor.svg" /></p>

<!-- more -->


<p>Я уже настроил три слоя из стека: на серверах стоят агенты Telegraf, передают метрики в InfluxDB, их можно смотреть в виде графиков через Grafana (InfluxData предлагает свой Chronograf, но он сильно отстает от Grafana по функционалу на январь 2016 и вряд ли это изменится).</p>

<p>У этой схемы есть недостаток: чтобы узнать, что что-то идет не так, нужно зайти в Grafana и глазами найти это что-то. Это меня устраивает, когда я уже знаю, что сервер плохо себя чувствует.</p>

<p>Kapacitor нужен для уведомлений, алертинга. В 2 словах: это демон, который умеет пропускать через себя данные, приходящие в InfluxDB, обрабатывать их и пересылать по разным каналам связи / на HTTP / в базу данных.</p>

<p>Для меня Kapacitor - прямой конкурент Monit, поэтому сравниваю с ним, больше ни с чем подобным дел не имел, но слышал, что для мониторинга серверов правильные пацаны используют Zabbix, Nagios/Icinga, Sensu, Riemann. Я решил пока не добавлять софта на сервера, да и уведомлять на основе уже собранных данных мне кажется правильным, этим объясняется мой выбор в пользу Kapacitor.</p>

<h3>Плюсы Kapacitor</h3>

<ol>
<li>Убирание лишнего. Kapacitor не надо ставить агентом, роль агента выполняет Telegraf. Monit, которым я пользуюсь сейчас для алертинга, дублирует функционал, собирая метрики самостоятельно.</li>
<li>Надежный алертинг. У monit тут есть проблема: когда умирает сервер, monit, установленный там, тоже умирает и не успевает отправить алерт на email. Надежный, кроме случаев, когда падает Kapacitor или InfluxDB, что случается.</li>
<li>Продвинутый алертинг. Monit умеет мало (ладно, много, но я умею на нем мало). Kapacitor имеет в распоряжении данные всех моих серверов, что позволяет ему смотреть на них как на систему. У меня в этом месте фантазия начинает играть, не буду расписывать, что по моему мнению можно отслеживать через Kapacitor, так как может такого и нельзя :)</li>
<li>Каналы алертинга. Заявлена поддержка HipChat, OpsGenie, Alerta, Sensu, PagerDuty, Slack, VictorOps, кроме этого есть запись в лог, email, POST-запрос. Для разных событий можно указывать разные каналы. Monit умеет только email, а мне нужен был Slack.</li>
</ol>


<h3>Плюсы Monit:</h3>

<ol>
<li>Monit проверенный, а Kapacitor - нет, как и весь TICK.</li>
<li>Monit имеет прямой доступ к серверу, что позволяет ему реагировать самостоятельно, например, перезагружать сервис, если он не отвечает. Kapacitor умеет только уведомлять.</li>
</ol>


<h2>Установка</h2>

<p>Ставить можно <a href="https://influxdata.com/downloads/#kapacitor">по-разному</a>.</p>

<p>Для тех, кто не дружит с Ansible, установка из репозитория, <a href="https://docs.influxdata.com/influxdb/v0.13/introduction/installation/">взятая из мануала</a> по InfluxDB (репозиторий один на весь стек InfluxData):</p>

<pre><code class="sh">curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -
source /etc/lsb-release
echo "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/influxdb.list
aptitude update
aptitude install kapacitor
</code></pre>

<p>Я буду ставить через Ansible <a href="https://github.com/rossmcdonald/kapacitor">rossmcdonald/kapacitor</a></p>

<pre><code class="sh">ansible-galaxy install rossmcdonald.kapacitor
ansible-playbook -c local kapacitor.yml
</code></pre>

<h4><a name="github-pull-request"></a>Как просто делать Pull request</h4>

<p>В плейбуке была ошибка, я бы об этом не упоминал, если бы не узнал недавно, как просто <a href="https://github.com/rossmcdonald/kapacitor/pull/1">делать pull request</a> прямо в браузере. Это заняло минуты две: жмем &ldquo;редактировать&rdquo; на интересующем файле, правим, ниже пишем сообщение к коммиту, сохраняем. Это автоматом создаст форк, отдельную ветку и сделает туда коммит. На следующей странице останется нажать &ldquo;Create pull request&rdquo;.</p>

<h2>Настройка</h2>

<p>Так как я уже использовал готовую ansible-роль, настройка уже включена в установку. Я взял <a href="https://github.com/rossmcdonald/kapacitor/blob/master/test.yml">тестовый плейбук</a> роли и изменил его: добавил данные авторизации в InfluxDB, SMTP, Slack. Опция <code>global</code> в настройках канала для уведомлений означает, что он будет использоваться по умолчанию в скриптах, иначе его нужно указывать явно.</p>

<p>Для установки сделал такой плейбук:</p>

<pre><code class="yaml kapacitor.yml">- hosts: all
  roles:
    - role: rossmcdonald.kapacitor
  vars:
    # [influxdb]
    kapacitor_influxdb_enabled: "true"
    kapacitor_influxdb_urls:
      - http://localhost:8086
    kapacitor_influxdb_username: user
    kapacitor_influxdb_password: pass

    # [smtp]
    kapacitor_smtp_enabled: "true"
    kapacitor_smtp_host: smtp.yandex.ru
    kapacitor_smtp_port: 587
    kapacitor_smtp_username: example@yandex.ru
    kapacitor_smtp_password: pass
    kapacitor_smtp_from: example@yandex.ru
    kapacitor_smtp_to:
      - "admin@example.com"

    # [slack]
    kapacitor_slack_enabled: "true"
    kapacitor_slack_url:  https://hooks.slack.com/services/G2JFW7VFQ/B13UHEN5X/9J6IVIcUw9FGCeF7hfjFNGBn # url ненастоящий
    kapacitor_slack_channel: "#servers"
    kapacitor_slack_global: "true"

    kapacitor_tasks_to_enable:
</code></pre>

<h2>Проверка</h2>

<p>Лучший способ проверить, что Kapacitor видит данные из InfluxDB - записать фрагмент:</p>

<pre><code class="sh">kapacitor record stream -name la_alert -duration 5s
</code></pre>

<p>Если запись пошла, можно приступать к самому интересному: созданию алертов.</p>

<p>Если через 5 секунд команда не завершилась, значит что-то пошло не так.
Смотрим логи:</p>

<ul>
<li>Kapacitor может говорить об ошибках к подключению к InfluxDB</li>
<li>InfluxDB может сыпать <code>connection refused</code> ошибками</li>
</ul>


<p>В моем случае домен, который я прописал в конфиге Kapacitor, был прописан в /etc/hosts на 127.0.1.1, Kapacitor слушал этот порт, соответственно, InfluxDB не мог достучаться из Docker-контейнера.</p>

<h4>Проблема из-за Docker</h4>

<p>У меня в логах была ошибка:</p>

<pre><code>open server: open service *influxdb.Service: subscription already exists
</code></pre>

<p>Я указал другой локальный хост, localhost, т.к. я не предполагаю, что к kapacitor будет обращаться кто-то, кроме InfluxDB, который стоит на той же машине. Это не помогло. Я не понял, в чем ошибка, nmap показывает свободный порт. Оставил стандартный, поддомен машины, это почему-то сработало.</p>

<p>Оказалось, проблема была в том, что InfluxDB при первом запуске Kapacitor'а создал на него подписки (subscriptions), которые означают то, что InfluxDB будет пересылать в Kapacitor все, что приходит в него.</p>

<p>InfluxDB у меня крутится в Docker'е с проброшенными портами, а Kapacitor - нет, то есть они технически были не на одной машине. Точнее, для Kapacitor'а казалось, что InfluxDB на этой же машине, но для Influx'a он на другой машине! Оказалось, что изнутри докера внутренний адрес, на который создались подписки, вел не туда, поэтому данные не доходили до Kapacitor, чтобы исправить это, понадобилось удалить подписки, узнав их имена:</p>

<pre><code class="sql">SHOW SUBSCRIPTIONS
DROP SUBSCRIPTION "kapacitor-42d050d7-5e60-462f-b079-3f8157ec2eff" ON "telegraf"."default"
DROP SUBSCRIPTION "kapacitor-42d050d7-5e60-462f-b079-3f8157ec2eff" ON "_internal"."monitor"
</code></pre>

<h2>Выводы</h2>

<ol>
<li>Использование Docker для InfluxDB сильно усложнило мне процесс установки при том, что ничего мне не дало: InfluxDB - это один бинарник, если у вас вся инфраструктура живет не в контейнерах, используйте установку из репозиториев, это проще. С другой стороны откатиться на предыдущую версию будет сложнее&hellip;</li>
<li>Kapacitor сильно превосходит Monit по возможностям алертинга, но уступает ему в контроле над ситуацией. Хотя можно себе представить сценарий, что Kapacitor отправляет POST-запрос с инструкциями к действиям сервису, который делает что-то, но меня такой самопальный RPC пугает.</li>
<li>Все это достаточно сырое в том смысле, что нет достаточной обвязки (оф. <a href="https://hub.docker.com/r/library/influxdb/">контейнер для InfluxDB</a> появился только 16 мая, самый популярный плейбук для Kapacitor понадобилось править, чтобы установить), информации очень мало, кроме GitHub issues и документации на данный момент нет ничего. Поэтому появляющиеся проблемы решать будет сложнее.</li>
</ol>


<h2>Ссылки</h2>

<ul>
<li><a href="https://influxdata.com/time-series-platform/kapacitor/">страница Kapacitor</a></li>
<li><a href="https://influxdata.com/get-started/configuring-alerts-with-kapacitor/">оф. туториал</a></li>
<li><a href="https://docs.influxdata.com/kapacitor/v0.12/">docs</a></li>
<li><a href="https://github.com/influxdata/kapacitor">influxdata/kapacitor</a></li>
<li><a href="https://github.com/influxdata/kapacitor-docker">influxdata/kapacitor-docker</a></li>
<li><a href="https://github.com/rossmcdonald/kapacitor">ansible-role-kapacitor</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CHANGELOG.md: ручное и автоматическое ведение истории изменений проекта в Git]]></title>
    <link href="http://blog.popstas.ru/blog/2016/03/06/changelog-dot-md-generate-from-git-conventions/"/>
    <updated>2016-03-06T10:09:13+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/03/06/changelog-dot-md-generate-from-git-conventions</id>
    <content type="html"><![CDATA[<p>С начала января я веду свой <a href="http://blog.popstas.ru/blog/2016/01/17/torrent-transmission-client-for-weburg/">проектик</a>, на котором обкатываю новые для меня технологии:</p>

<ul>
<li>Статический анализ кода, phpcs, phpmd, Scrutinizer</li>
<li>Автоматическая сборка, Travis CI</li>
<li>Unit тесты, PHPUnit</li>
<li>Покрытие кода, Coveralls</li>
<li>Работу через задачи для любых изменений, Github Issues, PhpStorm tasks</li>
<li>Документирование всего: README, CHANGELOG, сайт проекта, &ndash;help</li>
</ul>


<p>В этом посте изложена история изменений моего мнения о разных генераторах историй изменения.</p>

<p>Tl;dr: conventional-changelog, стандартизация коммитов.</p>

<p><img src="/images/2016-03/changelog.png"></p>

<!-- more -->


<h1>CHANGELOG.md</h1>

<p>Понятная для человека история изменений проекта нужна. Тут надо заметить что такими историями не являются:</p>

<ul>
<li>Issues проекта, ветка в менеджере задач, доска проекта и т.п.</li>
<li>git log проекта</li>
</ul>


<p>Файл CHANGELOG.md в корне проекта стал стандартом де-факто для проектов, в котором ведется история изменений, Gitlab даже делает для него отдельную вкладку на странице репозитория.</p>

<p>Про это, конечно, есть <a href="http://keepachangelog.com/">сайт</a>, <a href="https://github.com/olivierlacan/keep-a-changelog">репозиторий на Github</a> с тысячей звезд, проблема явно беспокоит людей.</p>

<p>Про ведение CHANGELOG я задумался, когда изучал проект <a href="https://github.com/hashicorp/otto/">otto</a>, когда писал про него <a href="http://habrahabr.ru/post/273009/">статью на хабр</a>.</p>

<h4>Структура у CHANGELOG более-менее у всех одна и та же:</h4>

<ul>
<li>Версия и дата релиза</li>
<li>Сломанные обратные совместимости</li>
<li>Новые фичи</li>
<li>Прочие изменения и улучшения</li>
<li>Исправленные баги</li>
</ul>


<p>Вести такой документ достаточно просто, я за 120 коммитов почти не забывал это делать. В файле нужно всегда держать вверху секцию Next Release с подготовленными заголовками, как-то так:</p>

<pre><code>## Next Release

BREAKING CHANGES:

FEATURES:

IMPROVEMENTS:

BUG FIXES:
</code></pre>

<p>Перед коммитом я всегда просматриваю дифф, в это время я записываю в коммент к коммиту кратко изменение в первую строку и более подробно в третью, если изменений больше одного, делаю в виде списка. Если про это есть задача, нужно упомянуть ее в виде #123 ссылки, Github умный и такие ссылки делает активными.</p>

<p>Так вот, нужно просто добавить в этот процесс копипасту коммента к коммиту в CHANGELOG, с раскладыванием по категориям изменений.</p>

<p>Во время релиза называем секцию, ставим ей дату, копипастим заголовки.</p>

<p>Процедура очень простая, настолько простая, что хочется ее поручить роботу.</p>

<h2>github_changelog_generator</h2>

<p><a href="https://github.com/skywinder/github-changelog-generator">github_changelog_generator</a> - ruby утилита, которая умеет генерировать CHANGELOG.md из любого репозитория. На выходе получаем документ типа <a href="https://github.com/skywinder/github-changelog-generator/blob/master/CHANGELOG.md">этого</a>, наполненный ссылками на задачи и пулл-реквесты, разбитый по категориям, все круто, как в рекламе. У меня получилось совсем не так красиво.</p>

<p>Что мне не понравилось в этом генераторе:</p>

<ul>
<li>Текст коммитов никак не учитывает, как и текст задач.</li>
<li>Чтобы она нормально работала, нужно по полной использовать Github Issues и метки для них, пулл-реквесты, в общем сильно завязано на Github (кто бы мог подумать?), иначе будут генериться просто ссылки на диффы между тегами.</li>
<li>Нельзя указывать свои секции (например, Breaking changes встроенного нет), но есть <a href="https://github.com/skywinder/github-changelog-generator/issues/316">issue #316</a> про это, судя по активности проекта, они скоро появятся.</li>
</ul>


<p>Что понравилось:</p>

<ul>
<li>Поведение из коробки что-то генерирует, даже если вы не думали про CHANGELOG.md до этого и не использовали Github фишки, это лучше, чем ничего. Но не намного.</li>
<li>Можно привязывать свои метки к существующим секциям лога.</li>
<li>Можно настраивать как параметрами к команде, так и конфигом. При запуске скрипт говорит: <code>Performing task with options</code>, так вот, каждую строку из перечисленного ниже конфига можно вставить в файл <code>.github_changelog_generator</code> и переопределить, заменив <code>_</code> на <code>-</code>.</li>
<li>Поддерживает сосуществование заполняемой вручную версии (которая все равно лучше автоматической) и генерируемого лога, для этого нужно переложить старый CHANGELOG.md в HISTORY.md (или другой файл, указав его в конфиге).</li>
</ul>


<p>В общем, github_changelog_generator в моем случае подходит хорошо,
если вся работа ведется на Github, это самый простой способ получить красивый CHANGELOG.md</p>

<p>Но на этом я не успокоился, основная причина в том, что на рабочие проекты на Github я не делаю. Хотелось более общего решения.</p>

<h2>git-extras changelog</h2>

<p><a href="https://github.com/tj/git-extras">tj/git-extras</a> - это <a href="https://github.com/tj/git-extras/blob/master/Commands.md">огромный</a> (около 50) пакет дополнительных команд, упрощающих работу с git. Я его раньше уже видел, но в то время подумал, что мне и встроенных в git команд слишком много. Но в поисках генератора снова набрел на него, у него есть такая команда.</p>

<p>Вот таким нехитрым способом можно в одну команду сгенерировать и запушить лог для проекта, где его не было, но версии помечались тегами и комменты к коммитам были осмысленными:
<code>
git changelog -a -p -x &gt; CHANGELOG.md &amp;&amp; git add CHANGELOG.md &amp;&amp; git commit CHANGELOG.md -m "add CHANGELOG.md" &amp;&amp; git push origin master
</code></p>

<p>Для пробы сделал лог для <a href="https://github.com/popstas/site-setup/blob/5cb4f52bfc5909bac8b8bc77540cf3283b94ff2a/CHANGELOG.md">site-setup</a>, <a href="https://github.com/popstas/server-scripts/blob/009d82420fa4623417cf437b00df36c662c759a2/CHANGELOG.md">server-scripts</a>, <a href="https://github.com/popstas/drupal-scripts/blob/b0b7a5907798ebde714471fbf1611c3232df5925/CHANGELOG.md">drupal-scripts</a>, на этом успокоился, больше в общем и тестить не на чем.</p>

<p>Ниже я отказался от него в пользу <code>conventional changelog</code>.</p>

<h4>Плюсы:</h4>

<ul>
<li>Простой как дверь, выполняешь команду, получаешь список изменений, разделенных версиями</li>
</ul>


<h4>Минусы:</h4>

<ul>
<li>Нет почти никаких настроек</li>
</ul>


<h2>rafinskipg/git-changelog</h2>

<p><a href="https://github.com/rafinskipg/git-changelog">rafinskipg/git-changelog</a> - node.js cкрипт, который парсит коммиты, написанные по <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#">стандартам Angular</a>. Я их прочитал, оказалось, что стандарты годные, к angular никак не привязаны.</p>

<p>Конфликтует с git-extras, так как оба они хотят называться git-changelog. Этот я сделал симлинком <code>git-changelog-angular</code>.</p>

<p>Параметров у скрипта немного, я с ними поигрался, но ничего хорошего у меня с этим тулом не вышло. Идем дальше.</p>

<h2>conventional-changelog</h2>

<p><a href="https://github.com/stevemao/conventional-changelog-cli">stevemao/conventional-changelog-cli</a> - node.js скрипт, также нацелен на стандарты Angular, но, <a href="https://github.com/stevemao/conventional-changelog-cli#why">по заявлениям</a> авторов это как раз то, что нужно:</p>

<ul>
<li>поддерживает свои форматы коммитов и несколько общих: &lsquo;angular&rsquo;, &lsquo;atom&rsquo;, &lsquo;codemirror&rsquo;, &lsquo;ember&rsquo;, &lsquo;eslint&rsquo;, &lsquo;express&rsquo;, &lsquo;jquery&rsquo;, &lsquo;jscs&rsquo;, &lsquo;jshint&rsquo;</li>
<li>поддерживает шаблоны</li>
<li>протестирован, в отличие от github_changelog_generator</li>
<li>отвязан от Github</li>
<li>имеет модульную структуру и несколько модулей вокруг себя</li>
</ul>


<p>Воспользовавшись <code>conventional-commits-detector</code>, узнал, что мои комменты к коммитам больше всего похожи на стандарт <code>eslint</code>.</p>

<p>Сгенерированный лог дал понять, что в eslint принято указывать категорию и через двоеточие суть, так коммиты в релизе разбиваются по категориям. Но в целом, конечно, коммиты были названы неправильно и хорошего лога не получилось.</p>

<p>Зато запуск без указания пресета сообщений выдал почти то же, что и <code>git-extras</code>, но вдобавок к этому задал мажорным и минорным версиям разный уровень и указал ссылку на коммит на Github для каждого коммита.</p>

<p>Сгенерировать лог с нуля можно командой:
<code>
conventional-changelog -i CHANGELOG.md -s -r 0
</code></p>

<p>После этого я конечно побежал исправлять логи у проектов, которым сделал логи час назад, вот что вышло: <a href="https://github.com/popstas/site-setup/blob/fd159ed7848aaf8695642bcb53c795922d307dd6/CHANGELOG.md">site-setup</a>, <a href="https://github.com/popstas/server-scripts/blob/ef6138faf0179f31929ff0d90d98466749d4f85b/CHANGELOG.md">server-scripts</a>, <a href="https://github.com/popstas/drupal-scripts/blob/3eb923c09e319a163f9fea9669dfa735b60044c1/CHANGELOG.md">drupal-scripts</a>.</p>

<p>Для проектов на своем Gitlab все сложнее: чтобы правильно делались ссылки на коммиты, нужно, во-первых, указать адрес проекта через файл package.json:
<code>
{
  "name": "myproject",
  "repository": {
    "type": "git",
    "url": "http://my.gitlab.ru/projects/myproject.git"
  }
}
</code>
А во-вторых не знаю, что надо сделать, он генерит ссылки с сокращенными хэшами, которые Github понимает, а Gitlab открывает страницу списка коммитов, т.к. ему нужен полный хэш, шаблон сходу не нашел.</p>

<p>Дальше искать не стал, думаю это оно самое.</p>

<p>Кроме лучшего результата из коробки и полной кастомизации мне в нем понравились модули:</p>

<ul>
<li><a href="https://github.com/ajoslin/angular-precommit">angular-precommit</a> - готовый валидатор сообщений к коммитам</li>
<li><a href="https://github.com/marionebl/conventional-changelog-lint">conventional-changelog-lint</a> - скрипт для pre-commit хука, проверяющий сообщения коммитов на соответствие стандартам, стандарты описываются в файле</li>
<li><a href="https://github.com/stevemao/conventional-github-releaser">conventional-github-releaser</a> - автоматическое создание релизов на Github. У меня они уже создаются, но приходится вручную заходить туда и править сообщение к релизу</li>
</ul>


<hr />

<h1>Выводы</h1>

<p>Для того, чтобы генератор создавал по-настоящему хорошие логи, важно определиться с форматом сообщений к коммитам, научиться следовать ему и научить роботов понимать наш формат, чтобы роботы <del>поработили людей</del> помогали правильно и не напрягаясь вести историю изменеий проекта в процессе, а не после работы над проектом.</p>

<p>Для себя я нашел инструмент, которым я теперь могу за 5 минут создавать историю изменений для проектов на основе коммитов.</p>

<p>Генерация CHANGELOG.md - шаг в сторону хорошей и актуальной документации по проекту, которая не будет занимать часы или дни, она будет частью рабочего процесса, конечно для маленького проекта из одного программиста это избыточно, мягко говоря, но надо же с чего-то начинать.</p>

<h2>UPD 08.03.2016</h2>

<p>Добавил валидатор:
<code>
npm install -g conventional-changelog-lint
echo 'conventional-changelog-lint -e' &gt; .git/hooks/commit-msg
chmod +x .git/hooks/commit-msg
</code>
После этого коммиты с неправильными сообщениями перестанут проходить.</p>

<p>Перед релизом генерирую CHANGELOG.md:
<code>
conventional-changelog -p angular -i CHANGELOG.md -s
</code>
Это допишет в лог содержимое коммитов с последнего релиза (semver тега). После этого остается поправить руками то, что не нравится, проставить версию.</p>

<p>После этого я генерирую документацию специфичной для проекта командой, коммит, тег, пуш:
<code>
git add .
git commit -m 'docs: v0.6.0'
git push --follow-tags
</code></p>

<p>После этого релиз. Релиз будем делать через <code>conventional-github-releaser</code>:
<code>
npm install -g conventional-github-releaser
CONVENTIONAL_GITHUB_RELEASER_TOKEN=your_public_repo_token conventional-github-releaser -p angular
</code>
Еще не разобрался с тем, как это скрестить с выкладкой PHAR архива с Travis: для <code>github-releaser</code> нужно, чтобы релиза еще не было, но он создается автоматически при пуше тега на Github. После удаления релиза (превращения в Draft), github-releaser отработал, вставил данные CHANGELOG в релиз, все как надо.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интеграция Git, Gitlab и Planfix почти как на Github]]></title>
    <link href="http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration/"/>
    <updated>2016-03-02T00:49:29+05:00</updated>
    <id>http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration</id>
    <content type="html"><![CDATA[<p>Распробовал тут на неделе интеграцию задач Github и самого Git issue tracker.</p>

<p>Ниже будет написано, как настроить в <a href="https://planfix.ru/">Планфиксе</a> такое поведение:</p>

<ul>
<li>В коммите упоминаем задачу, например, <code>Правки футера шаблона, https://test.planfix.ru/task/123456</code></li>
<li>После push в удаленный репозиторий в упомянутой задаче появляется комментарий с текстом коммита и ссылкой на страницу коммита на Gitlab, если проект подключен к репозиторию.</li>
</ul>


<p>Tl;dr: настраивается post-receive hook в Git на удаленном сервере, после каждого пуша анализируются сообщения пришедших коммитов, коммиты, содержащие ссылки на задачи отправляются в задачи по email.</p>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p><img src="/images/2016-03/planfix_logo.png"></p>

<!-- more -->


<p>Здесь надо в 2 словах рассказать о нашем workflow:</p>

<ul>
<li>Компания занимается разработкой и поддержкой около 100 сайтов.</li>
<li>Каждый сайт использует Git, репозиторий лежит прямо в корне сайта, bare репозитории отсутствуют.</li>
<li>Часто бывают мелкие правки на разных сайтах.</li>
<li>90% сайтов на Drupal 7, в котором половина хранится в базе данных.</li>
<li>Во время правки контент-менеджер или клиент могут пользоваться сайтом и менять на нем данные</li>
<li>Разработчик выкачивает проект в PhpStorm, настаивает сохранение по Ctrl+S изменений на боевом сайте, таким образом получается, что когда приходит время пушить, на удаленном сервере фактически уже есть все изменения.</li>
<li>Разработчик также может напрямую править код сайта на удаленном сервере по SFTP, не выкачивая проект, после чего зайти по SSH на удаленный сервер и сделать коммит прямо оттуда.</li>
<li>Git по сути используется не для доставки изменений на боевой сайт, а для их доставки на компы разработчиков и ведения журнала изменений сайта.</li>
</ul>


<h2>Github issues</h2>

<p>Кто не знает про issues гитхаба, расскажу вкратце о его фишках:</p>

<ul>
<li>В задачах можно ссылаться на коммиты и другие задачи по номерам, они автоматически становятся ссылками.</li>
<li>В коммитах можно ссылаться на задачи так же: <code>#123</code>, такой коммит автоматом упоминается в задаче.</li>
<li>В PhpStorm можно смотреть список открытых issues и создавать из них задачи в IDE, что позволяет автоматом создавать чейнджлист, ветку для выполнения задачи, в коммите сразу будет ссылка на задачу (это все по желанию).</li>
<li>Можно закрывать задачу прямо из коммита, для этого достаточно упомянуть его рядом с одним из ключевых слов, например, <code>closes #123</code> после пуша в гитхаб закроет указанную задачу.</li>
</ul>


<p>А главное, что все связано и из любого места можно перейти на связанные действия.</p>

<p>Я уже краем уха слышал и видел обо всем этом и видел в чужих репозиториях, но вся картина нарисовалась только после использования. Да и к тому же на гитхабе до этого сталкивался только с pull-request'ами, там немного другое поведение.</p>

<h2>PhpStorm tasks</h2>

<p>В PhpStorm есть интеграция с менеджерами задач, Github там конечно есть, Планфикса там конечно нет, но зато если у менеджера задач есть API, можно интегрировать неподдерживаемый сервис. У Планфикса API есть, но из коробки он не подойдет для этой интеграции, нужно писать свои обертки. В общем-то это дает не много, всего лишь можно будет получать список задач по команде из шторма, и дописывать в коммит ссылку на задачу.</p>

<p>Кстати таски в шторме помогают и без интеграции с трекером: Ctrl+Shift+A - open task, автоматом чистятся все вкладки (создается контекст задачи), создается ветка в гите, changelist, по close task - коммит, я недавно начал пользоваться.</p>

<p>Но гораздо интереснее интеграция в другую сторону: ссылки из задач на коммиты.</p>

<p>Когда я разобрался с тем, как устроена интеграция задач в гитхабе, до меня быстро дошло: просто менеджер задач должен уметь парсить текст коммита, приходящий из гита и делать на основе этого какие-то действия. С этим тоже пока облом: в Планфиксе на данный момент нет обработки писем, прилетающих в задачи, зато <a href="https://planfix.ru/docs/%D0%9A%D0%B0%D0%BA_%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D1%83_%D0%BF%D0%BE_e-mail%3F">есть обработка писем</a>, приходящих на email юзера, что позволяет надеяться на появление обработки писем, приходящих на email задачи.</p>

<h2>Gitlab</h2>

<p>Самые активные проекты мы дублируем на наш внутренний Gitlab. Использование довольно извращенное, Gitlab сейчас никак не участвует в рабочем процессе, являясь просто зеркалом и веб-интерфейсом для просмотра коммитов.</p>

<p>На машине разработчика настраивается <code>pre-push</code> хук, который пушит также в Gitlab:</p>

<pre><code>#!/bin/bash

remote="$1"

if [ "$remote" != "gitlab" ] &amp;&amp; [ "$(git remote show | grep -c "gitlab")" = 1 ]; then
        git push gitlab master
fi
</code></pre>

<h2>Git и Planfix</h2>

<p>Никакой готовой интеграции между Git и Планфиксом нет, зато обе системы гибкие и позволяют лепить уникальные решения без больших усилий.</p>

<p>Git поддерживает хуки: скрипты, запускающиеся по определенным событиям.</p>

<p>У каждой задачи в Планфиксе есть свой email адрес, если послать на него письмо, оно придет в задачу в виде комментария, если с email отправителя связан пользователь, то письмо придет как будто от него.</p>

<p>Значит нам нужно отправлять email из Git в Планфикс на адрес задачи.</p>

<h1>Связываем все вместе</h1>

<p>Вся интеграция делается в одном файле, код хука лежит здесь - <a href="https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive">git-hook-post-receive</a></p>

<p>Чтобы подключить хук, надо положить скрипт в папку <code>.git/hooks/post-receive</code> и сделать его исполняемым, для этого надо выполнить в корне проекта:
<code>
curl -s "https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average" &gt; .git/hooks/post-receive
chmod +x .git/hooks/post-receive
</code></p>

<p>Так как у нас много проектов, я храню его в отдельной общей папке, а в каждом репозитории создаю символическую ссылку на него.</p>

<p>Хук получает список коммитов, пришедших с последним пушем, находит первую ссылку на задачу Планфикса и отправляет туда письмо.</p>

<h4>О письме</h4>

<ul>
<li><strong>Отправитель</strong>: email того, кто сделал коммит. По этой причине email в git config и email в профиле юзера Планфикса должны совпадать.</li>
<li><strong>Получатель</strong>: email задачи Планфикса</li>
<li><strong>Тема письма</strong>: <code>@commit @nonotify</code>, @nonotify для того, чтобы не уведомлять всех участников задачи о коммите, <code>@commit</code> ничего не значит, может быть потом пригодится для поиска таких комментов, хотя в отчетах текст комментария все равно использовать нельзя.</li>
<li><strong>Текст письма</strong>: текст коммита. Если репозиторий имеет зеркало на Gitlab, то в конец текста будет добавлена ссылка на коммит.</li>
</ul>


<p>Чтобы хук добавлял ссылку на Gitlab, не придумал ничего лучше, чем добавить remote <code>gitlab</code>:
<code>
git remote add gitlab ssh://git@org.ru:10022/sites/test.ru.git
</code></p>

<p>После этого хук будет извлекать из этого адреса URL <a href="http://org.ru/sites/test,">http://org.ru/sites/test,</a> который является главной страницей репозитория. Сайт при всем при этом не имеет доступа к Gitlab, поэтому push и pull в этот remote работать не будут.</p>
]]></content>
  </entry>
  
</feed>
